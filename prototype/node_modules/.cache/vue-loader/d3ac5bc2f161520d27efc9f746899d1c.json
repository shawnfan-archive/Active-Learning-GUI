{"remainingRequest":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue","mtime":1574199792872},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js","mtime":1573853364298},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1573853370373}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      // image file name\n      image: null,\n      activationMap: [],\n      activationColor: [255, 0, 0, 100],\n      inactivationColor: [0, 0, 0, 0],\n      tool_started: false,\n      tool: \"deactivate\",\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      map_id: 0\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.image = res.data.model_output.image;\n          this.activationMap = res.data.model_output.activation;\n          console.log(this.activationMap)\n          this.drawImage();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    drawImage: function() {\n      // load brain image and activation map onto canvas\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = 1.0;\n      // draw brain scan\n      let img = new Image();\n      img.src = require(\"/Users/shawnfan/active_learning_prototype/\" +\n        this.image);\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n      };\n    },\n    drawActivation: function() {\n      // draw activation map\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = 0;\n      // create blank imageData - transparent black pixels (0,0,0,0)\n      let activation_map = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < activation_map.height; i++) {\n        for (let k = 0; k < activation_map.width; k++) {\n          let map_index = 4 * (activation_map.width * i + k);\n          console.log(this.activationMap)\n          if (this.activationMap[i][k] === 1) {\n            //this.activationMap.activation â€“ a list of binary lists: 1 - activated, 0 - inactivated\n            // (255, 0, 0) = red\n            activation_map.data[map_index] = this.activationColor[0];\n            activation_map.data[map_index + 1] = this.activationColor[1];\n            activation_map.data[map_index + 2] = this.activationColor[2];\n            activation_map.data[map_index + 3] = this.activationColor[3];\n          } else {\n            // (0, 0, 0) = black\n            activation_map.data[map_index] = this.inactivationColor[0];\n            activation_map.data[map_index + 1] = this.inactivationColor[1];\n            activation_map.data[map_index + 2] = this.inactivationColor[2];\n            activation_map.data[map_index + 3] = this.inactivationColor[3];\n          }\n        }\n      }\n      map_ctx.putImageData(activation_map, 0, 0);\n    },\n    drawCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    correctActivation: function(event) {\n      // draw cursor\n      this.drawCursor(event.offsetX, event.offsetY);\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      canvas.globalAlpha = 0.5;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      if (this.tool === \"deactivate\") {\n        ctx.strokeStyle = \"rgba(0, 0, 255, 255)\";\n        ctx.fillStyle = \"rgba(0, 0, 255, 255)\";\n        ctx.globalCompositeOperation = \"source-over\";\n      } else if (this.tool === \"activate\") {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 255)\";\n        ctx.fillStyle = \"rgba(255, 0, 0, 255)\";\n        ctx.globalCompositeOperation = \"source-over\";\n      }\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        // start drawing\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let index = 0;\n      // activation pixel color\n      let pixel = this.activationColor;\n      if (this.tool === \"deactivate\") {\n        index = 2;\n        // deactivation pixel value\n        pixel = this.inactivationColor;\n      }\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + index] === 255) {\n          map_data.data[i] = pixel[0];\n          map_data.data[i + 1] = pixel[1];\n          map_data.data[i + 2] = pixel[2];\n          map_data.data[i + 3] = pixel[3];\n        }\n      }\n      // clear drawing\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      const payload = {\n        corrected_activation: corrected_map.data,\n        map_id: this.map_id\n      };\n      this.saveData(payload);\n      this.map_id = this.map_id + 1;\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveLearning.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"main\">\n    <p>Image ID: {{ activationMap.image_id }}</p>\n    <p>Disease: {{ activationMap.disease }}</p>\n    <div id=\"container\">\n      <h2>Canvas Line {{activationMap.canvas_width}} by {{activationMap.canvas_height}}</h2>\n      <!--canvas for brain image-->\n      <div class=\"canvas\">\n        <canvas ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <div class=\"canvas\">\n        <canvas ref=\"cursor\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <!--canvas for activation map-->\n      <div class=\"canvas\">\n        <canvas ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <!--canvas for corrections-->\n      <div id=\"draw\">\n        <canvas\n          ref=\"draw\"\n          v-bind:width=\"canvas_width\"\n          v-bind:height=\"canvas_height\"\n          v-on:mousemove=\"correctActivation\"\n        ></canvas>\n      </div>\n    </div>\n    <button v-on:click=\"drawActivation\">Load Activation Map</button>\n    <button v-on:click=\"setTool('deactivate')\">Deactivate</button>\n    <button v-on:click=\"setTool('activate')\">Activate</button>\n    <button v-on:click=\"setToolSize(5)\">5</button>\n    <button v-on:click=\"setToolSize(10)\">10</button>\n    <button v-on:click=\"setToolSize(20)\">20</button>\n    <button v-on:click=\"updateActivationMap\">Update Activation Map</button>\n    <button v-on:click=\"onSubmit\">Save and Retrain Model</button>\n    <div id=\"test\">\n      <canvas\n        id=\"test\"\n        ref=\"test\"\n        v-bind:width=\"canvas_width\"\n        v-bind:height=\"canvas_height\"\n        style=\"border:1px solid #000000;\"\n      ></canvas>\n    </div>\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      // image file name\n      image: null,\n      activationMap: [],\n      activationColor: [255, 0, 0, 100],\n      inactivationColor: [0, 0, 0, 0],\n      tool_started: false,\n      tool: \"deactivate\",\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      map_id: 0\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.image = res.data.model_output.image;\n          this.activationMap = res.data.model_output.activation;\n          console.log(this.activationMap)\n          this.drawImage();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    drawImage: function() {\n      // load brain image and activation map onto canvas\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = 1.0;\n      // draw brain scan\n      let img = new Image();\n      img.src = require(\"/Users/shawnfan/active_learning_prototype/\" +\n        this.image);\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n      };\n    },\n    drawActivation: function() {\n      // draw activation map\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = 0;\n      // create blank imageData - transparent black pixels (0,0,0,0)\n      let activation_map = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < activation_map.height; i++) {\n        for (let k = 0; k < activation_map.width; k++) {\n          let map_index = 4 * (activation_map.width * i + k);\n          console.log(this.activationMap)\n          if (this.activationMap[i][k] === 1) {\n            //this.activationMap.activation â€“ a list of binary lists: 1 - activated, 0 - inactivated\n            // (255, 0, 0) = red\n            activation_map.data[map_index] = this.activationColor[0];\n            activation_map.data[map_index + 1] = this.activationColor[1];\n            activation_map.data[map_index + 2] = this.activationColor[2];\n            activation_map.data[map_index + 3] = this.activationColor[3];\n          } else {\n            // (0, 0, 0) = black\n            activation_map.data[map_index] = this.inactivationColor[0];\n            activation_map.data[map_index + 1] = this.inactivationColor[1];\n            activation_map.data[map_index + 2] = this.inactivationColor[2];\n            activation_map.data[map_index + 3] = this.inactivationColor[3];\n          }\n        }\n      }\n      map_ctx.putImageData(activation_map, 0, 0);\n    },\n    drawCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    correctActivation: function(event) {\n      // draw cursor\n      this.drawCursor(event.offsetX, event.offsetY);\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      canvas.globalAlpha = 0.5;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      if (this.tool === \"deactivate\") {\n        ctx.strokeStyle = \"rgba(0, 0, 255, 255)\";\n        ctx.fillStyle = \"rgba(0, 0, 255, 255)\";\n        ctx.globalCompositeOperation = \"source-over\";\n      } else if (this.tool === \"activate\") {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 255)\";\n        ctx.fillStyle = \"rgba(255, 0, 0, 255)\";\n        ctx.globalCompositeOperation = \"source-over\";\n      }\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        // start drawing\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let index = 0;\n      // activation pixel color\n      let pixel = this.activationColor;\n      if (this.tool === \"deactivate\") {\n        index = 2;\n        // deactivation pixel value\n        pixel = this.inactivationColor;\n      }\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + index] === 255) {\n          map_data.data[i] = pixel[0];\n          map_data.data[i + 1] = pixel[1];\n          map_data.data[i + 2] = pixel[2];\n          map_data.data[i + 3] = pixel[3];\n        }\n      }\n      // clear drawing\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      const payload = {\n        corrected_activation: corrected_map.data,\n        map_id: this.map_id\n      };\n      this.saveData(payload);\n      this.map_id = this.map_id + 1;\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n}\n</style>"]}]}