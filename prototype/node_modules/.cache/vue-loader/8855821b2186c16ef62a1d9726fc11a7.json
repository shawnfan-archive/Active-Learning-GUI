{"remainingRequest":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue","mtime":1576081950786},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js","mtime":1573853364298},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1573853370373}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      image: [],\n      images: [\n        // {\n        //   id: \"00001\",\n        //   disease: \"Stroke\",\n        //   path: \"Site6_031923___100\"\n        // },\n      ],\n      activationMap: {},\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      },\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function() {\n      if (this.loading) {\n        setTimeout(this.updateTrainingProgress, 10000)\n      } else {\n        return null\n      }\n    }\n  },\n  methods: {\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.images = res.data.images;\n          this.activationMap = res.data.activation_map;\n          // load first image in images\n          this.loadImage(this.images[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function(image) {\n      this.current_image = image;\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = this.graphics.image_opacity;\n      let img = new Image();\n      img.src = require(`../assets/${image.path}.jpeg`);\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0, this.canvas_width, this.canvas_height);\n      };\n      // find corresponding image id\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      let map_data = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < map_data.height; i++) {\n        for (let k = 0; k < map_data.width; k++) {\n          let map_index = 4 * (map_data.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            map_data.data[map_index] = this.graphics.activation_color[0];\n            map_data.data[map_index + 1] = this.graphics.activation_color[1];\n            map_data.data[map_index + 2] = this.graphics.activation_color[2];\n            map_data.data[map_index + 3] = this.graphics.activation_color[3];\n          } else {\n            map_data.data[map_index] = this.graphics.inactivation_color[0];\n            map_data.data[map_index + 1] = this.graphics.inactivation_color[1];\n            map_data.data[map_index + 2] = this.graphics.inactivation_color[2];\n            map_data.data[map_index + 3] = this.graphics.inactivation_color[3];\n          }\n        }\n      }\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      // start drawing\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n      };\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let pixel_color = this.graphics.activation_color;\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      let updated_map_data = map_ctx.createImageData(map_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      }\n\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n\n      // clear draw\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          //alert(\"Progress saved!\");\n          this.loading = false;\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let corrected_activation = [];\n      for (let i = 0; i < corrected_map.data.length; i += 4) {\n        if (corrected_map.data[i] === 255) {\n          corrected_activation.push(1);\n        } else {\n          corrected_activation.push(0);\n        }\n      }\n      const payload = {\n        image: this.current_image,\n        corrected_activation: corrected_activation\n      };\n      this.saveData(payload);\n      this.loading = true;\n    },\n    updateTrainingProgress: function() {\n      const path = \"http://localhost:5000/training_progress\";\n      axios\n        .get(path)\n        .then(res => {\n          this.current_epoch = res.data.current_epoch;\n          console.log(this.current_epoch);\n          this.loading_message =\n            \"Current epoch:\" + String(this.current_epoch) + \"/10\";\n          this.check_number = this.check_number + 1;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2GA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveLearning.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-app id=\"main\">\n    <v-container align-center justify-center>\n      <v-toolbar dense class=\"my-8\">\n        <v-toolbar-title>Image ID: {{ current_image.image_id }} Disease: {{ current_image.disease }}</v-toolbar-title>\n\n        <v-spacer></v-spacer>\n\n        <v-toolbar-items>\n          <v-btn text v-on:click=\"onSubmit\">Save and Retrain Model</v-btn>\n          <v-btn text v-on:click=\"loadActivationMap\">Load Activation Map</v-btn>\n        </v-toolbar-items>\n      </v-toolbar>\n\n      <!-- <div id=\"container\"> -->\n      <v-row align=\"center\" justify=\"center\">\n        <h2>Canvas: {{canvas_width}} by {{canvas_height}}</h2>\n      </v-row>\n\n      <v-row align=\"center\" justify=\"center\">\n        <v-col>\n          <!-- <v-row justify=\"end\"> -->\n\n          <p>Size</p>\n          <v-btn-toggle class=\"my-1\">\n            <v-btn text v-on:click=\"setToolSize(5)\">5</v-btn>\n            <v-btn text v-on:click=\"setToolSize(10)\">10</v-btn>\n            <v-btn text v-on:click=\"setToolSize(20)\">20</v-btn>\n          </v-btn-toggle>\n\n          <p>Mode</p>\n          <v-btn-toggle class=\"my-1\">\n            <v-btn v-on:click=\"setTool('activate')\">\n            <v-icon>mdi-brush</v-icon>\n            </v-btn>\n            <v-btn text v-on:click=\"setTool('deactivate')\">Deactivate</v-btn>\n          </v-btn-toggle>\n          <!-- </v-row> -->\n        </v-col>\n\n        <v-col>\n          <!--canvas for brain image-->\n          <div class=\"canvas\">\n            <canvas ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n          </div>\n          <!--canvas for activation map-->\n          <div class=\"canvas\">\n            <canvas ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n          </div>\n          <div class=\"canvas\">\n            <canvas ref=\"cursor\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n          </div>\n          <!--canvas for corrections-->\n          <div id=\"draw\">\n            <canvas\n              ref=\"draw\"\n              v-bind:width=\"canvas_width\"\n              v-bind:height=\"canvas_height\"\n              v-on:mousemove=\"correctActivation\"\n            ></canvas>\n          </div>\n        </v-col>\n\n        <v-col>\n          <!-- <div class=\"thumbnail_image\" v-for=\"image in images\" v-bind:key=\"image.id\">\n            <img\n              :src=\"require(`../assets/${image.path}.jpeg`)\"\n              weight=\"100\"\n              height=\"100\"\n              v-on:click=\"loadImage(image)\"\n            />\n          </div>-->\n        </v-col>\n      </v-row>\n      <!-- </div> -->\n\n      <v-row alight=\"center\" justify=\"center\">\n        <v-sheet light elevation=\"12\" max-width=\"800\" class=\"ma-8\">\n          <v-slide-group>\n            <v-slide-item class=\"ma-4\" v-for=\"image in images\" :key=\"image.id\">\n              <v-card width=\"100\">\n                <v-img\n                  contain\n                  :src=\"require(`../assets/${image.path}.jpeg`)\"\n                  weight=\"100\"\n                  height=\"100\"\n                  v-on:click=\"loadImage(image)\"\n                />\n              </v-card>\n            </v-slide-item>\n          </v-slide-group>\n        </v-sheet>\n      </v-row>\n\n      <v-dialog v-model=\"loading\" persistent>\n        <v-card color=\"primary\">\n          <v-card-text>\n            {{ loading_message }}\n            <v-progress-linear indeterminate color=\"white\"></v-progress-linear>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      image: [],\n      images: [\n        // {\n        //   id: \"00001\",\n        //   disease: \"Stroke\",\n        //   path: \"Site6_031923___100\"\n        // },\n      ],\n      activationMap: {},\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      },\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function() {\n      if (this.loading) {\n        setTimeout(this.updateTrainingProgress, 10000)\n      } else {\n        return null\n      }\n    }\n  },\n  methods: {\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.images = res.data.images;\n          this.activationMap = res.data.activation_map;\n          // load first image in images\n          this.loadImage(this.images[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function(image) {\n      this.current_image = image;\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = this.graphics.image_opacity;\n      let img = new Image();\n      img.src = require(`../assets/${image.path}.jpeg`);\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0, this.canvas_width, this.canvas_height);\n      };\n      // find corresponding image id\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      let map_data = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < map_data.height; i++) {\n        for (let k = 0; k < map_data.width; k++) {\n          let map_index = 4 * (map_data.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            map_data.data[map_index] = this.graphics.activation_color[0];\n            map_data.data[map_index + 1] = this.graphics.activation_color[1];\n            map_data.data[map_index + 2] = this.graphics.activation_color[2];\n            map_data.data[map_index + 3] = this.graphics.activation_color[3];\n          } else {\n            map_data.data[map_index] = this.graphics.inactivation_color[0];\n            map_data.data[map_index + 1] = this.graphics.inactivation_color[1];\n            map_data.data[map_index + 2] = this.graphics.inactivation_color[2];\n            map_data.data[map_index + 3] = this.graphics.inactivation_color[3];\n          }\n        }\n      }\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      // start drawing\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n      };\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let pixel_color = this.graphics.activation_color;\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      let updated_map_data = map_ctx.createImageData(map_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      }\n\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n\n      // clear draw\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          //alert(\"Progress saved!\");\n          this.loading = false;\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let corrected_activation = [];\n      for (let i = 0; i < corrected_map.data.length; i += 4) {\n        if (corrected_map.data[i] === 255) {\n          corrected_activation.push(1);\n        } else {\n          corrected_activation.push(0);\n        }\n      }\n      const payload = {\n        image: this.current_image,\n        corrected_activation: corrected_activation\n      };\n      this.saveData(payload);\n      this.loading = true;\n    },\n    updateTrainingProgress: function() {\n      const path = \"http://localhost:5000/training_progress\";\n      axios\n        .get(path)\n        .then(res => {\n          this.current_epoch = res.data.current_epoch;\n          console.log(this.current_epoch);\n          this.loading_message =\n            \"Current epoch:\" + String(this.current_epoch) + \"/10\";\n          this.check_number = this.check_number + 1;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n#graphics {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n</style>"]}]}