{"remainingRequest":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue?vue&type=style&index=0&id=12f5bc74&scoped=true&lang=css&","dependencies":[{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue","mtime":1574463641681},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/css-loader/index.js","mtime":1573853365407},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1573853370374},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/postcss-loader/src/index.js","mtime":1573853367865},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1573853370373}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n#load {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n#load_button {\n  background-color: white;\n  color: navy;\n  text-align: center;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n#save {\n  position: relative;\n  float: left;\n  padding: 1em\n}\n#save_button {\n  background-color: white;\n  color: navy;\n  text-align: center;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n#graphics {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n#mode_buttons{\n  float: left;\n}\n.mode_button {\n  font-size: 24px;\n  border-radius: 40%;\n  padding: 0.5em;\n}\n#size_buttons {\n  float: left;\n}\n.size_button {\n  font-size: 20px;\n  border-radius: 50%;\n}\n",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveLearning.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"main\">\n    <h1>Image ID: {{ image.image_id }} Disease: {{ image.disease }}</h1>\n    <div id=\"container\">\n      <h2>Canvas Line {{canvas_width}} by {{canvas_height}}</h2>\n      <!--canvas for brain image-->\n      <div class=\"canvas\">\n        <canvas ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <!--canvas for activation map-->\n      <div class=\"canvas\">\n        <canvas ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <div class=\"canvas\">\n        <canvas ref=\"cursor\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <!--canvas for corrections-->\n      <div id=\"draw\">\n        <canvas\n          ref=\"draw\"\n          v-bind:width=\"canvas_width\"\n          v-bind:height=\"canvas_height\"\n          v-on:mousemove=\"correctActivation\"\n        ></canvas>\n      </div>\n    </div>\n    <div id=\"load\">\n      <button id=\"load_button\" v-on:click=\"loadActivationMap\">Load Activation Map</button>\n    </div>\n    <div id=\"save\">\n      <button id=\"save_button\" v-on:click=\"onSubmit\">Save and Retrain Model</button>\n    </div>\n    <div id=\"graphics\">\n      <div id=\"mode_buttons\">\n        <h3>Mode:</h3>\n        <div>\n          <button class=\"mode_button\" v-on:click=\"setTool('activate')\">Activate</button>\n        </div>\n        <div>\n          <button class=\"mode_button\" v-on:click=\"setTool('deactivate')\">Deactivate</button>\n        </div>\n      </div>\n      <div id=\"size_buttons\">\n        <h3>Paintbrush Size:</h3>\n        <button class=\"size_button\" v-on:click=\"setToolSize(5)\">5</button>\n        <button class=\"size_button\" v-on:click=\"setToolSize(10)\">10</button>\n        <button class=\"size_button\" v-on:click=\"setToolSize(20)\">20</button>\n      </div>\n    </div>\n    <!-- <canvas ref=\"test\" width=\"436\" height=\"364\"></canvas> -->\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      image: {},\n      activationMap: {},\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      }\n    };\n  },\n  methods: {\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.image = res.data.image;\n          this.activationMap = res.data.activation_map;\n          this.loadImage();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function() {\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = this.graphics.image_opacity;\n      // load brain image\n      let img = new Image();\n      //img.src = require(\"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/assets/brainpic1.jpeg\")\n      img.src = require(\"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/flask_unet/output/resized_input.png\");\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n      };\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      let map_data = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < map_data.height; i++) {\n        for (let k = 0; k < map_data.width; k++) {\n          let map_index = 4 * (map_data.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            map_data.data[map_index] = this.graphics.activation_color[0];\n            map_data.data[map_index + 1] = this.graphics.activation_color[1];\n            map_data.data[map_index + 2] = this.graphics.activation_color[2];\n            map_data.data[map_index + 3] = this.graphics.activation_color[3];\n          } else {\n            map_data.data[map_index] = this.graphics.inactivation_color[0];\n            map_data.data[map_index + 1] = this.graphics.inactivation_color[1];\n            map_data.data[map_index + 2] = this.graphics.inactivation_color[2];\n            map_data.data[map_index + 3] = this.graphics.inactivation_color[3];\n          }\n        }\n      }\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      // start drawing\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n      };\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let pixel_color = this.graphics.activation_color;\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      let updated_map_data = map_ctx.createImageData(map_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      }\n\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n\n      // clear draw\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      const payload = { corrected_activation: corrected_map.data };\n      this.saveData(payload);\n    }\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n#load {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n#load_button {\n  background-color: white;\n  color: navy;\n  text-align: center;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n#save {\n  position: relative;\n  float: left;\n  padding: 1em\n}\n#save_button {\n  background-color: white;\n  color: navy;\n  text-align: center;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n#graphics {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n#mode_buttons{\n  float: left;\n}\n.mode_button {\n  font-size: 24px;\n  border-radius: 40%;\n  padding: 0.5em;\n}\n#size_buttons {\n  float: left;\n}\n.size_button {\n  font-size: 20px;\n  border-radius: 50%;\n}\n</style>"]}]}