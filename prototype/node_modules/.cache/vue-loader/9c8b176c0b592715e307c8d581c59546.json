{"remainingRequest":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue?vue&type=style&index=0&id=12f5bc74&scoped=true&lang=css&","dependencies":[{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue","mtime":1580413234406},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/css-loader/index.js","mtime":1576457982244},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1576457989079},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/postcss-loader/src/index.js","mtime":1576457985377},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1576457980983},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1576457989077}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappingsmjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveLearning.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-app id=\"main\">\n    <v-container align-center justify-center>\n      <!-- Toolbar -->\n      <v-row>\n        <v-toolbar dense prominent class=\"my-8\">\n          <v-app-bar-nav-icon></v-app-bar-nav-icon>\n\n          <v-toolbar-title>An Active Learning Approach to Acute Stroke Detection</v-toolbar-title>\n\n          <v-spacer></v-spacer>\n\n          <v-toolbar-items>\n            <v-btn text v-on:click=\"openDialog\">\n              Save and Retrain Model\n              <v-icon>mdi-upload</v-icon>\n            </v-btn>\n            <v-btn text>\n              Settings\n              <v-icon>mdi-settings</v-icon>\n            </v-btn>\n          </v-toolbar-items>\n        </v-toolbar>\n      </v-row>\n\n      <!-- User interface -->\n      <v-row align=\"center\" justify=\"center\">\n        <v-col cols=\"8\">\n          <v-container justify-center>\n            <v-card class=\"pa-auto\">\n              <v-container>\n                <v-row align=\"center\" justify=\"center\">\n                  <!-- Buttons -->\n                  <v-col cols=\"auto\">\n                    <!-- Paintbrush -->\n                    <v-col>\n                      <v-menu top offset-y>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn class=\"mx-2\" fab dark color=\"red\" v-on=\"on\">\n                            <v-icon dark>mdi-pencil</v-icon>\n                          </v-btn>\n                        </template>\n\n                        <v-list rounded nav>\n                          <v-list-item v-on:click=\"setTool('activate')\">\n                            <v-btn class=\"mx-1\" fab dark color=\"orange\" v-on:click=\"setToolSize(20)\">\n                              <v-icon size=\"25\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n\n                          <v-list-item v-on:click=\"setTool('activate')\">\n                            <v-btn class=\"mx-1\" fab dark color=\"orange\" v-on:click=\"setToolSize(10)\">\n                              <v-icon size=\"12.5\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n\n                          <v-list-item v-on:click=\"setTool('activate')\">\n                            <v-btn class=\"mx-1\" fab dark color=\"orange\" v-on:click=\"setToolSize(5)\">\n                              <v-icon size=\"7.5\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n                        </v-list>\n                      </v-menu>\n                    </v-col>\n\n                    <!-- Eraser -->\n                    <v-col>\n                      <v-menu bottom offset-y>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn class=\"mx-2\" fab dark color=\"cyan\" v-on=\"on\">\n                            <v-icon dark>mdi-eraser</v-icon>\n                          </v-btn>\n                        </template>\n\n                        <v-list rounded nav>\n                          <v-list-item v-on:click=\"setTool('deactivate')\">\n                            <v-btn class=\"mx-1\" fab dark color=\"blue\" v-on:click=\"setToolSize(20)\">\n                              <v-icon size=\"25\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n\n                          <v-list-item v-on:click=\"setTool('deactivate')\">\n                            <v-btn class=\"mx-1\" fab dark color=\"blue\" v-on:click=\"setToolSize(10)\">\n                              <v-icon size=\"12.5\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n\n                          <v-list-item v-on:click=\"setTool('deactivate')\">\n                            <v-btn class=\"mx-1\" fab dark color=\"blue\" v-on:click=\"setToolSize(5)\">\n                              <v-icon size=\"7.5\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n                        </v-list>\n                      </v-menu>\n                    </v-col>\n\n                  </v-col>\n\n                  <!-- Canvases -->\n                  <v-col cols=\"auto\">\n                    <v-row align=\"center\" justify=\"center\">\n                      <h2>Image ID: {{ current_image.image_id }}</h2>\n\n                      <v-divider class=\"mx-4\" vertical></v-divider>\n\n                      <h2>Disease: {{ current_image.disease }}</h2>\n                    </v-row>\n\n                    <v-row>\n                      <div class=\"canvas\">\n                        <v-skeleton-loader\n                          v-if=\"skeleton_loader\"\n                          boilerplate=\"false\"\n                          :height=\"canvas_height\"\n                          :width=\"canvas_width\"\n                          type=\"image\"\n                        ></v-skeleton-loader>\n                      </div>\n\n                      <!--canvas for brain image-->\n                      <div class=\"canvas\">\n                        <canvas ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n                      </div>\n                      <!--canvas for activation map-->\n                      <div class=\"canvas\">\n                        <canvas ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n                      </div>\n                      <div class=\"canvas\">\n                        <canvas\n                          ref=\"cursor\"\n                          v-bind:width=\"canvas_width\"\n                          v-bind:height=\"canvas_height\"\n                        ></canvas>\n                      </div>\n                      <!--canvas for corrections-->\n                      <div id=\"draw\">\n                        <canvas\n                          ref=\"draw\"\n                          v-bind:width=\"canvas_width\"\n                          v-bind:height=\"canvas_height\"\n                          v-on:mousemove=\"correctActivation\"\n                        ></canvas>\n                      </div>\n                    </v-row>\n                  </v-col>\n                </v-row>\n              </v-container>\n            </v-card>\n          </v-container>\n          <!-- </v-row> -->\n        </v-col>\n\n        <v-col cols=\"2\">\n          <v-row justify=\"center\">\n            <v-card>\n              <v-list class=\"overflow-y-auto\" max-height=\"600\">\n                <v-list-item-group>\n                  <v-list-item class=\"ma-4\" v-for=\"image in images\" :key=\"image.id\">\n                    <v-card class=\"pa-2\" width=\"100\" height=\"105\" raised>\n                      <v-img\n                        class=\"my-0\"\n                        contain\n                        :src=\"require(`../assets/${image.path}.jpeg`)\"\n                        weight=\"75\"\n                        height=\"75\"\n                        v-on:click=\"loadImage(image)\"\n                      ></v-img>\n                      <v-card-subtitle class=\"pa-0\">{{image.image_id}}</v-card-subtitle>\n                    </v-card>\n                  </v-list-item>\n                </v-list-item-group>\n              </v-list>\n            </v-card>\n          </v-row>\n        </v-col>\n      </v-row>\n\n      <!-- Submission dialog -->\n      <v-dialog v-model=\"dialog\" persistent max-width=\"1000\">\n        <v-card>\n          <v-card-title class=\"headline\">Submit activaion maps and retrain model?</v-card-title>\n          <v-card-text>Latest model: {{model_name}}</v-card-text>\n          <v-card-actions>\n            <v-btn color=\"red darken-1\" text v-on:click=\"closeDialog\">Cancel</v-btn>\n\n            <v-spacer></v-spacer>\n\n            <v-btn color=\"green darken-1\" text v-on:click=\"onSubmit(true)\">Train model from scratch</v-btn>\n            <v-btn color=\"green darken-1\" text v-on:click=\"onSubmit(false)\">Retrain model</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Loading dialog -->\n      <v-dialog v-model=\"loading\" persistent width=\"800\">\n        <v-card color=\"primary\" dark>\n          <v-card-title>\n            {{ loading_message }}\n            <v-progress-linear indeterminate color=\"white\"></v-progress-linear>\n          </v-card-title>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      images: [\n        // {\n        //   image_id: string,\n        //   disease: string,\n        //   path: string\n        // },\n      ],\n      activation_maps: [\n        // {string (id): array(activation map)}\n      ],\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      canvas_width: 600,\n      canvas_height: 500,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      },\n      skeleton_loader: true,\n      skeleton_thumbnail: [1, 2, 3, 4, 5],\n      dialog: false,\n      model_name: \"\",\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      total_epochs: null,\n      time_remaining: \"\",\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function() {\n      if (this.loading) {\n        // check training progress every 10 seconds\n        setTimeout(this.updateTrainingProgress, 10000);\n      } else {\n        return null;\n      }\n    }\n  },\n  methods: {\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.images = res.data.images;\n          this.model_name = res.data.latest_model;\n\n          for (let image_id in res.data.activation_maps) {\n            let activation_map = [];\n            // convert binary array to rgba array\n            for (\n              let row_index = 0;\n              row_index < this.canvas_height;\n              row_index++\n            ) {\n              for (\n                let col_index = 0;\n                col_index < this.canvas_width;\n                col_index++\n              ) {\n                if (\n                  res.data.activation_maps[image_id][row_index][col_index] === 1\n                ) {\n                  activation_map.push.apply(\n                    activation_map,\n                    this.graphics.activation_color\n                  );\n                } else {\n                  activation_map.push.apply(\n                    activation_map,\n                    this.graphics.inactivation_color\n                  );\n                }\n              }\n            }\n            this.activation_maps[image_id] = activation_map;\n          }\n\n          this.skeleton_loader = false;\n\n          this.current_image.image_id = \"\";\n\n          // load first image in images\n          this.loadImage(this.images[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function(image) {\n      // store activation map of old image if not first time loading\n      if (this.current_image.image_id !== \"\") {\n        this.storeActivationMap();\n      }\n\n      // update current image to new image\n      this.current_image = image;\n\n      // set image opacity\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      img_ctx.globalAlpha = this.graphics.image_opacity;\n\n      // load new image\n      let img = new Image();\n      img.src = require(`../assets/${this.current_image.path}.jpeg`);\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0, this.canvas_width, this.canvas_height);\n      };\n\n      // load new activation map\n      this.loadActivationMap();\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      // load activation map for current_image\n\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      let map_data = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let current_activation_map = this.activation_maps[\n        this.current_image.image_id\n      ];\n      for (\n        let pixel_index = 0;\n        pixel_index < current_activation_map.length;\n        pixel_index++\n      ) {\n        map_data.data[pixel_index] = current_activation_map[pixel_index];\n      }\n\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      // start drawing\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n      };\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let pixel_color = this.graphics.activation_color;\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      }\n\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n\n      // clear drawings\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    storeActivationMap: function() {\n      // store activation map of current image\n\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      this.activation_maps[this.current_image.image_id] = map_data.data;\n    },\n    openDialog: function() {\n      this.dialog = true;\n    },\n    closeDialog: function() {\n      this.dialog = false;\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          this.loading = false;\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function(from_scratch) {\n      this.storeActivationMap();\n      this.loading_message = \"Initializing Training...\"; //Reset loading message\n      \n      // convert rgba array to binary array\n      let corrected_activation_maps = {};\n      for (let image_id in this.activation_maps) {\n        let map_array = [];\n        for (\n          let pixel_index = 0;\n          pixel_index < this.activation_maps[image_id].length;\n          pixel_index += 4\n        ) {\n          if (this.activation_maps[image_id][pixel_index] === 255) {\n            map_array.push(1);\n          } else {\n            map_array.push(0);\n          }\n        }\n        corrected_activation_maps[image_id] = map_array;\n      }\n\n      const payload = {\n        from_scratch: from_scratch,\n        activation_maps: corrected_activation_maps\n      };\n\n      this.saveData(payload);\n\n      this.dialog = false;\n\n      this.loading = true;\n    },\n    updateTrainingProgress: function() {\n      const path = \"http://localhost:5000/training_progress\";\n      axios\n        .get(path)\n        .then(res => {\n          this.current_epoch = res.data.current_epoch;\n          this.total_epochs = res.data.total_epochs;\n          this.time_remaining = res.data.time_remaining;\n\n          console.log(this.current_epoch);\n          this.loading_message =\n            \"Current Epoch:\" +\n            String(this.current_epoch) +\n            \"/\" +\n            String(this.total_epochs) +\n            \" \" +\n            \"Estimated Time Remaining: \" +\n            this.time_remaining;\n          this.check_number = this.check_number + 1;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n</style>"]}]}