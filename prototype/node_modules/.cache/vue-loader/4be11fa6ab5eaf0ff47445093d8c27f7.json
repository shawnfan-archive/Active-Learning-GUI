{"remainingRequest":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue","mtime":1573249565942},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      activationMap: {},\n      tool_started: false,\n      tool: \"paintbrush\",\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 346\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.activationMap = res.data.activation_map;\n          this.drawImageAndActivation();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    drawImageAndActivation: function() {\n      // input: n/a\n      // output: load brain image and activation map onto canvas\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = 0.8;\n      let pixel_ctx = this.$refs.pixel_img.getContext(\"2d\");\n      pixel_ctx.globalAlpha = 0.8;\n      // draw brain scan\n      let img = new Image();\n      img.src = require(\"../assets/brainpic1.jpeg\");\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n        pixel_ctx.drawImage(img, 0, 0);\n      };\n      // draw activation map\n      // create new ImageData object\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = 0.8;\n      let activation_map = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < activation_map.height; i++) {\n        for (let k = 0; k < activation_map.width; k++) {\n          let map_index = 4 * (activation_map.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            // (255, 0, 0) = red\n            activation_map.data[map_index] = 255;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            // opacity: 0 - 255\n            activation_map.data[map_index + 3] = 100;\n          } else {\n            // (0, 0, 0) = black\n            activation_map.data[map_index] = 0;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            activation_map.data[map_index + 3] = 0;\n          }\n        }\n      }\n      map_ctx.putImageData(activation_map, 0, 0);\n    },\n    correctActivation: function(event) {\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      if (this.tool === \"paintbrush\") {\n        ctx.strokeStyle = \"blue\";\n        ctx.globalCompositeOperation = \"source-over\";\n      } else {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n        ctx.globalCompositeOperation = \"destination-out\";\n      }\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      canvas.onmousedown = () => {\n        // start drawing\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    correctTest: function(event) {\n      let canvas = this.$refs.pixel_img;\n      let ctx = this.$refs.pixel_img.getContext(\"2d\");\n      let map = ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      canvas.onmousedown = () => {\n        this.tool_started = true;\n      };\n      if (this.tool_started) {\n        let pixelIndices = this.computeToolPixels(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size\n        );\n        for (let i = 0; i < pixelIndices.length; i++) {\n          let index = (436 * pixelIndices[i][1] + pixelIndices[i][0]) * 4;\n          map.data[index] = 0;\n          map.data[index + 1] = 0;\n          map.data[index + 2] = 0;\n          map.data[index + 3] = 255;\n        }\n        // // single pixel\n        // let index = (436 * event.offsetY + event.offsetX) * 4;\n        // map.data[index] = 0;\n        // map.data[index + 1] = 0;\n        // map.data[index + 2] = 0;\n        // map.data[index + 3] = 255;\n        ctx.putImageData(map, 0, 0);\n      }\n      canvas.onmouseup = () => {\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    computeToolPixels: function(x, y, radius) {\n      // compute x and y coordinates of all pixels covered by circle with center at (x, y) and radius\n      let pixels = [];\n      let i = 0;\n      let j = 0;\n      let i_start = x - radius;\n      let j_start = y - radius;\n      let i_end = x + radius;\n      let j_end = y + radius;\n      for (i = i_start; i < i_end; i++) {\n        for (j = j_start; j < j_end; j++) {\n          if (Math.sqrt((i - x) ** 2 + (j - y) ** 2) < radius) {\n            pixels.push([i, j]);\n          }\n        }\n      }\n      return pixels;\n    },\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let updated_map_data = map_ctx.createImageData(map_data);\n      console.log(correction_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = 0;\n          map_data.data[i + 1] = 0;\n          map_data.data[i + 2] = 0;\n          map_data.data[i + 3] = 0;\n        }\n      }\n      // clear drawing\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.activationMap.canvas_width,\n        this.activationMap.canvas_height\n      );\n      let test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      const payload = {corrected_activation: corrected_map.data};\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveLearning.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"main\">\n    <p>Image ID: {{ activationMap.image_id }}</p>\n    <p>Disease: {{ activationMap.disease }}</p>\n    <div id=\"container\">\n      <h2>Canvas Line {{activationMap.canvas_width}} by {{activationMap.canvas_height}}</h2>\n      <!--canvas for brain image-->\n      <canvas class=\"canvas\" ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      <!--canvas for activation map-->\n      <canvas class=\"canvas\" ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      <!--canvas for corrections-->\n      <canvas\n        class=\"canvas\"\n        ref=\"draw\"\n        v-bind:width=\"canvas_width\"\n        v-bind:height=\"canvas_height\"\n        v-on:mousemove=\"correctActivation\"\n      ></canvas>\n      <!-- <canvas ref=\"result\" width=\"436\" height=\"364\" style=\"border:1px solid #000000;\"></canvas> -->\n    </div>\n    <div id=\"pixels\">\n      <h2>Pixel Manipulation</h2>\n      <canvas\n        class=\"canvas1\"\n        ref=\"pixel_img\"\n        width=\"436\"\n        height=\"364\"\n        style=\"border:1px solid #000000;\"\n        v-on:mousemove=\"correctTest\"\n      ></canvas>\n    </div>\n    <div id=\"buttons\">\n      <button v-on:click=\"setTool('paintbrush')\">Paintbrush</button>\n      <button v-on:click=\"setToolSize(5)\">5</button>\n      <button v-on:click=\"setToolSize(10)\">10</button>\n      <button v-on:click=\"setToolSize(20)\">20</button>\n      <button v-on:click=\"setTool('eraser')\">Eraser</button>\n      <button v-on:click=\"updateActivationMap\">Update Activation Map</button>\n      <button v-on:click=\"onSubmit\">Save</button>\n    </div>\n    <canvas ref=\"test\" width=\"436\" height=\"364\"></canvas>\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      activationMap: {},\n      tool_started: false,\n      tool: \"paintbrush\",\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 346\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.activationMap = res.data.activation_map;\n          this.drawImageAndActivation();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    drawImageAndActivation: function() {\n      // input: n/a\n      // output: load brain image and activation map onto canvas\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = 0.8;\n      let pixel_ctx = this.$refs.pixel_img.getContext(\"2d\");\n      pixel_ctx.globalAlpha = 0.8;\n      // draw brain scan\n      let img = new Image();\n      img.src = require(\"../assets/brainpic1.jpeg\");\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n        pixel_ctx.drawImage(img, 0, 0);\n      };\n      // draw activation map\n      // create new ImageData object\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = 0.8;\n      let activation_map = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < activation_map.height; i++) {\n        for (let k = 0; k < activation_map.width; k++) {\n          let map_index = 4 * (activation_map.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            // (255, 0, 0) = red\n            activation_map.data[map_index] = 255;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            // opacity: 0 - 255\n            activation_map.data[map_index + 3] = 100;\n          } else {\n            // (0, 0, 0) = black\n            activation_map.data[map_index] = 0;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            activation_map.data[map_index + 3] = 0;\n          }\n        }\n      }\n      map_ctx.putImageData(activation_map, 0, 0);\n    },\n    correctActivation: function(event) {\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      if (this.tool === \"paintbrush\") {\n        ctx.strokeStyle = \"blue\";\n        ctx.globalCompositeOperation = \"source-over\";\n      } else {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n        ctx.globalCompositeOperation = \"destination-out\";\n      }\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      canvas.onmousedown = () => {\n        // start drawing\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    correctTest: function(event) {\n      let canvas = this.$refs.pixel_img;\n      let ctx = this.$refs.pixel_img.getContext(\"2d\");\n      let map = ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      canvas.onmousedown = () => {\n        this.tool_started = true;\n      };\n      if (this.tool_started) {\n        let pixelIndices = this.computeToolPixels(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size\n        );\n        for (let i = 0; i < pixelIndices.length; i++) {\n          let index = (436 * pixelIndices[i][1] + pixelIndices[i][0]) * 4;\n          map.data[index] = 0;\n          map.data[index + 1] = 0;\n          map.data[index + 2] = 0;\n          map.data[index + 3] = 255;\n        }\n        // // single pixel\n        // let index = (436 * event.offsetY + event.offsetX) * 4;\n        // map.data[index] = 0;\n        // map.data[index + 1] = 0;\n        // map.data[index + 2] = 0;\n        // map.data[index + 3] = 255;\n        ctx.putImageData(map, 0, 0);\n      }\n      canvas.onmouseup = () => {\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    computeToolPixels: function(x, y, radius) {\n      // compute x and y coordinates of all pixels covered by circle with center at (x, y) and radius\n      let pixels = [];\n      let i = 0;\n      let j = 0;\n      let i_start = x - radius;\n      let j_start = y - radius;\n      let i_end = x + radius;\n      let j_end = y + radius;\n      for (i = i_start; i < i_end; i++) {\n        for (j = j_start; j < j_end; j++) {\n          if (Math.sqrt((i - x) ** 2 + (j - y) ** 2) < radius) {\n            pixels.push([i, j]);\n          }\n        }\n      }\n      return pixels;\n    },\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let updated_map_data = map_ctx.createImageData(map_data);\n      console.log(correction_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = 0;\n          map_data.data[i + 1] = 0;\n          map_data.data[i + 2] = 0;\n          map_data.data[i + 3] = 0;\n        }\n      }\n      // clear drawing\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.activationMap.canvas_width,\n        this.activationMap.canvas_height\n      );\n      let test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      const payload = {corrected_activation: corrected_map.data};\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#main {\n  position: relative;\n}\n#container {\n  position: relative;\n  float: left;\n}\n.canvas {\n  position: absolute;\n  top: 20;\n  left: 10;\n}\n#pixels {\n  position: relative;\n  float: right;\n}\n.canvas1 {\n  position: relative;\n  float: right;\n}\n#buttons {\n  position: relative;\n  clear: both;\n}\n</style>"]}]}