{"remainingRequest":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue","mtime":1571090631420},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      activationMap: {},\n      drawMode: \"draw\",\n      markerSize: 10,\n      markers: [],\n      configStage: {\n        width: 500,\n        height: 500,\n      },\n      configLayer: {\n      },\n      configImage: {\n        image: new Image()\n      }\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.activationMap = res.data.activation_maps;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    setDrawMode: function(mode) {\n      this.drawMode = mode;\n    },\n    setMarkerSize: function(size) {\n      this.drawMode = \"draw\";\n      this.markerSize = size;\n    },\n    correctActivation: function(event) {\n      if(this.drawMode === \"draw\") {\n        let pos = this.$refs.stage.getStage().getPointerPosition();\n        let position = { x: pos.x, y: pos.y, markerSize: this.markerSize, markerID: this.markers.length };\n        this.markers.push(position);\n      } else if(event.target.className === \"Circle\") {\n        console.log(event.target.attrs.id)\n        this.markers = this.markers.filter(marker => marker.markerID !== event.target.attrs.id)\n      }\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    retrainModel: function(event) {\n      alert(\"Training in progress...\");\n    },\n    onSubmit: function(event) {\n      const payload = {corrections: this.markers};\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {\n    this.configImage.image.src =\n      \"https://www.radiologyinfo.org/gallery-items/images/picbrain.jpg\";\n  }\n};\n",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ActiveLearning.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <app-header></app-header>\n    <p>Image ID: {{ activationMap.image_id }}</p>\n    <p>Image group: {{ activationMap.disease }}</p>\n    <p>Click on activation map to correct activations</p>\n    <button v-on:click=\"setDrawMode('draw')\">Draw</button>\n    <button v-on:click=\"setMarkerSize(10)\">10</button>\n    <button v-on:click=\"setMarkerSize(20)\">20</button>\n    <button v-on:click=\"setMarkerSize(30)\">30</button>\n    <button v-on:click=\"setDrawMode('erase')\">Eraser</button>\n    <v-stage ref=\"stage\" :config=\"configStage\" v-on:mousedown=\"correctActivation\">\n      <v-layer ref=\"layer\" :config=\"configLayer\">\n        <v-image :config=\"configImage\"></v-image>\n        <v-circle\n          v-for=\"marker in markers\"\n          :key=\"marker.markerID\"\n          :config=\"{x: marker.x, y: marker.y, radius: marker.markerSize, fill: 'blue', id:marker.markerID}\"\n        ></v-circle>\n      </v-layer>\n    </v-stage>\n    <button v-on:click=\"onSubmit\">Save</button>\n    <button v-on:click=\"retrainModel\">Retrain Model</button>\n    <app-footer></app-footer>\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      activationMap: {},\n      drawMode: \"draw\",\n      markerSize: 10,\n      markers: [],\n      configStage: {\n        width: 500,\n        height: 500,\n      },\n      configLayer: {\n      },\n      configImage: {\n        image: new Image()\n      }\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.activationMap = res.data.activation_maps;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    setDrawMode: function(mode) {\n      this.drawMode = mode;\n    },\n    setMarkerSize: function(size) {\n      this.drawMode = \"draw\";\n      this.markerSize = size;\n    },\n    correctActivation: function(event) {\n      if(this.drawMode === \"draw\") {\n        let pos = this.$refs.stage.getStage().getPointerPosition();\n        let position = { x: pos.x, y: pos.y, markerSize: this.markerSize, markerID: this.markers.length };\n        this.markers.push(position);\n      } else if(event.target.className === \"Circle\") {\n        console.log(event.target.attrs.id)\n        this.markers = this.markers.filter(marker => marker.markerID !== event.target.attrs.id)\n      }\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    retrainModel: function(event) {\n      alert(\"Training in progress...\");\n    },\n    onSubmit: function(event) {\n      const payload = {corrections: this.markers};\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {\n    this.configImage.image.src =\n      \"https://www.radiologyinfo.org/gallery-items/images/picbrain.jpg\";\n  }\n};\n</script>\n\n<style scoped>\n</style>"]}]}