{"remainingRequest":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js!/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue","mtime":1574463641681},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js","mtime":1573853364298},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1573853364435},{"path":"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1573853370373}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      image: {},\n      activationMap: {},\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      }\n    };\n  },\n  methods: {\n    setTool: function setTool(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function setToolSize(tool_size) {\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function getActivationMap() {\n      var _this = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.get(path).then(function (res) {\n        _this.image = res.data.image;\n        _this.activationMap = res.data.activation_map;\n\n        _this.loadImage();\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    loadImage: function loadImage() {\n      var img_ctx = this.$refs.img.getContext(\"2d\"); // set global opacity\n\n      img_ctx.globalAlpha = this.graphics.image_opacity; // load brain image\n\n      var img = new Image(); //img.src = require(\"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/assets/brainpic1.jpeg\")\n\n      img.src = require(\"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/flask_unet/output/resized_input.png\");\n\n      img.onload = function () {\n        img_ctx.drawImage(img, 0, 0);\n      };\n    },\n    loadCursor: function loadCursor(x, y) {\n      var ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function loadActivationMap() {\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      var map_data = map_ctx.createImageData(this.canvas_width, this.canvas_height);\n\n      for (var i = 0; i < map_data.height; i++) {\n        for (var k = 0; k < map_data.width; k++) {\n          var map_index = 4 * (map_data.width * i + k);\n\n          if (this.activationMap.activation[i][k] === 1) {\n            map_data.data[map_index] = this.graphics.activation_color[0];\n            map_data.data[map_index + 1] = this.graphics.activation_color[1];\n            map_data.data[map_index + 2] = this.graphics.activation_color[2];\n            map_data.data[map_index + 3] = this.graphics.activation_color[3];\n          } else {\n            map_data.data[map_index] = this.graphics.inactivation_color[0];\n            map_data.data[map_index + 1] = this.graphics.inactivation_color[1];\n            map_data.data[map_index + 2] = this.graphics.inactivation_color[2];\n            map_data.data[map_index + 3] = this.graphics.inactivation_color[3];\n          }\n        }\n      }\n\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function correctActivation(event) {\n      var _this2 = this;\n\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY); // highlight incorrect activation\n\n      var canvas = this.$refs.draw;\n      var ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size; // start drawing\n\n      canvas.onmousedown = function () {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(event.offsetX, event.offsetY, _this2.tool_size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n\n        _this2.updateActivationMap();\n\n        _this2.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n\n      canvas.onmouseup = function () {\n        // stop drawing\n        if (_this2.tool_started) {\n          _this2.tool_started = false;\n        } // draw circle\n\n\n        ctx.beginPath();\n        ctx.arc(event.offsetX, event.offsetY, _this2.tool_size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n\n        _this2.updateActivationMap();\n      };\n    },\n    updateActivationMap: function updateActivationMap() {\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      var draw_ctx = this.$refs.draw.getContext(\"2d\");\n      var map_data = map_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var correction_data = draw_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var pixel_color = this.graphics.activation_color;\n\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      var updated_map_data = map_ctx.createImageData(map_data);\n\n      for (var i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      } // draw updated activation map\n\n\n      map_ctx.putImageData(map_data, 0, 0); // clear draw\n\n      var clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    saveData: function saveData(payload) {\n      var _this3 = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.post(path, payload).then(function () {\n        alert(\"Progress saved!\");\n\n        _this3.getActivationMap();\n      }).catch(function (error) {\n        console.log(error);\n\n        _this3.getActivationMap();\n      });\n    },\n    onSubmit: function onSubmit(event) {\n      this.updateActivationMap();\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      var corrected_map = map_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      var payload = {\n        corrected_activation: corrected_map.data\n      };\n      this.saveData(payload);\n    }\n  },\n  created: function created() {\n    this.getActivationMap();\n  },\n  mounted: function mounted() {}\n};",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"main\">\n    <h1>Image ID: {{ image.image_id }} Disease: {{ image.disease }}</h1>\n    <div id=\"container\">\n      <h2>Canvas Line {{canvas_width}} by {{canvas_height}}</h2>\n      <!--canvas for brain image-->\n      <div class=\"canvas\">\n        <canvas ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <!--canvas for activation map-->\n      <div class=\"canvas\">\n        <canvas ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <div class=\"canvas\">\n        <canvas ref=\"cursor\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      </div>\n      <!--canvas for corrections-->\n      <div id=\"draw\">\n        <canvas\n          ref=\"draw\"\n          v-bind:width=\"canvas_width\"\n          v-bind:height=\"canvas_height\"\n          v-on:mousemove=\"correctActivation\"\n        ></canvas>\n      </div>\n    </div>\n    <div id=\"load\">\n      <button id=\"load_button\" v-on:click=\"loadActivationMap\">Load Activation Map</button>\n    </div>\n    <div id=\"save\">\n      <button id=\"save_button\" v-on:click=\"onSubmit\">Save and Retrain Model</button>\n    </div>\n    <div id=\"graphics\">\n      <div id=\"mode_buttons\">\n        <h3>Mode:</h3>\n        <div>\n          <button class=\"mode_button\" v-on:click=\"setTool('activate')\">Activate</button>\n        </div>\n        <div>\n          <button class=\"mode_button\" v-on:click=\"setTool('deactivate')\">Deactivate</button>\n        </div>\n      </div>\n      <div id=\"size_buttons\">\n        <h3>Paintbrush Size:</h3>\n        <button class=\"size_button\" v-on:click=\"setToolSize(5)\">5</button>\n        <button class=\"size_button\" v-on:click=\"setToolSize(10)\">10</button>\n        <button class=\"size_button\" v-on:click=\"setToolSize(20)\">20</button>\n      </div>\n    </div>\n    <!-- <canvas ref=\"test\" width=\"436\" height=\"364\"></canvas> -->\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      image: {},\n      activationMap: {},\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 364,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      }\n    };\n  },\n  methods: {\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.image = res.data.image;\n          this.activationMap = res.data.activation_map;\n          this.loadImage();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function() {\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = this.graphics.image_opacity;\n      // load brain image\n      let img = new Image();\n      //img.src = require(\"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/prototype/src/assets/brainpic1.jpeg\")\n      img.src = require(\"/Users/shawnfan/Dropbox/active_learning_20191115/Active-Learning-GUI/flask_unet/output/resized_input.png\");\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n      };\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      let map_data = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < map_data.height; i++) {\n        for (let k = 0; k < map_data.width; k++) {\n          let map_index = 4 * (map_data.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            map_data.data[map_index] = this.graphics.activation_color[0];\n            map_data.data[map_index + 1] = this.graphics.activation_color[1];\n            map_data.data[map_index + 2] = this.graphics.activation_color[2];\n            map_data.data[map_index + 3] = this.graphics.activation_color[3];\n          } else {\n            map_data.data[map_index] = this.graphics.inactivation_color[0];\n            map_data.data[map_index + 1] = this.graphics.inactivation_color[1];\n            map_data.data[map_index + 2] = this.graphics.inactivation_color[2];\n            map_data.data[map_index + 3] = this.graphics.inactivation_color[3];\n          }\n        }\n      }\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      // start drawing\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n      };\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let pixel_color = this.graphics.activation_color;\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      let updated_map_data = map_ctx.createImageData(map_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      }\n\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n\n      // clear draw\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      const payload = { corrected_activation: corrected_map.data };\n      this.saveData(payload);\n    }\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n#load {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n#load_button {\n  background-color: white;\n  color: navy;\n  text-align: center;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n#save {\n  position: relative;\n  float: left;\n  padding: 1em\n}\n#save_button {\n  background-color: white;\n  color: navy;\n  text-align: center;\n  font-size: 26px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n#graphics {\n  position: relative;\n  float: left;\n  padding: 1em;\n}\n#mode_buttons{\n  float: left;\n}\n.mode_button {\n  font-size: 24px;\n  border-radius: 40%;\n  padding: 0.5em;\n}\n#size_buttons {\n  float: left;\n}\n.size_button {\n  font-size: 20px;\n  border-radius: 50%;\n}\n</style>"],"sourceRoot":"src/components"}]}