{"remainingRequest":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue","mtime":1582903838179},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1576457980983},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js","mtime":1576457980775},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1576457980983},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1576457989077}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport { ContentLoader } from \"vue-content-loader\";\nexport default {\n  components: {\n    ContentLoader: ContentLoader\n  },\n  data: function data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      images: [// {\n        //   image_id: string,\n        //   disease: string,\n        //   path: string\n        // },\n      ],\n      activation_maps: [// {string (id): array(activation map)}\n      ],\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      show_map: false,\n      button_parameters: [[20, 25], [10, 12.5], [5, 7.5]],\n      canvas_width: 600,\n      canvas_height: 500,\n      graphics: {\n        paintbrush: \"rgb(254, 0, 0)\",\n        map_opacity: 0.8\n      },\n      paint: {\n        points: [],\n        tool: \"\"\n      },\n      skeleton_loader: true,\n      skeleton_thumbnail: [1, 2, 3, 4, 5],\n      dialog: false,\n      model_name: \"\",\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      total_epochs: null,\n      time_remaining: \"\",\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function check_number() {\n      if (this.loading) {\n        // check training progress every 10 seconds\n        setTimeout(this.updateTrainingProgress, 10000);\n      } else {\n        return null;\n      }\n    },\n    show_map: function show_map() {}\n  },\n  methods: {\n    setTool: function setTool(tool, tool_size) {\n      this.tool = tool;\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function getActivationMap() {\n      var _this = this;\n\n      //return promise\n      return axios.get(\"http://localhost:5000/active_learning\").then(function (res) {\n        _this.images = res.data.images;\n        _this.model_name = res.data.latest_model;\n        _this.activation_maps = res.data.activation_maps;\n        _this.current_image = _this.images[0];\n        _this.skeleton_loader = false;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    loadImage: function loadImage(image) {\n      this.storeActivationMap(); // update current image to new image\n\n      this.current_image = image;\n      this.loadActivationMap();\n    },\n    loadCursor: function loadCursor(x, y) {\n      var ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function loadActivationMap() {\n      var canvas = this.$refs.draw;\n      var ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush; //Clear current activation map\n\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.globalCompositeOperation = \"source-over\";\n      var current_activation_map = this.activation_maps[this.current_image.image_id];\n\n      for (var row_index = 0; row_index < this.canvas_height; row_index++) {\n        for (var column_index = 0; column_index < this.canvas_width; column_index++) {\n          if (current_activation_map[row_index][column_index] === 1) {\n            ctx.fillRect(column_index, row_index, 1, 1);\n          }\n        }\n      }\n    },\n    clearActivationMap: function clearActivationMap() {\n      //Clear current activation map\n      var ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n    },\n    correctActivation: function correctActivation(event) {\n      var _this2 = this;\n\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n      var canvas = this.$refs.draw;\n      var ctx = this.$refs.draw.getContext(\"2d\"); //Set graphics parameters\n\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.lineJoin = ctx.lineCap = \"round\";\n      ctx.lineWidth = this.tool_size; //Check if using eraser or painbrush\n\n      if (this.tool === \"deactivate\") {\n        ctx.globalCompositeOperation = \"destination-out\";\n      } else {\n        ctx.globalCompositeOperation = \"source-over\";\n      }\n\n      canvas.onmousedown = function () {\n        //Draw circle\n        ctx.beginPath();\n        ctx.arc(event.offsetX, event.offsetY, _this2.tool_size / 2, 0, 2 * Math.PI);\n        ctx.fill(); //Start drawing\n\n        _this2.tool_started = true;\n\n        _this2.paint.points.push({\n          x: event.offsetX,\n          y: event.offsetY\n        }); // ctx.beginPath();\n        // ctx.moveTo(event.offsetX, event.offsetY);\n\n      };\n\n      if (this.tool_started) {\n        this.paint.points.push({\n          x: event.offsetX,\n          y: event.offsetY\n        });\n        ctx.beginPath(); // ctx.lineTo(event.offsetX, event.offsetY);\n        // ctx.stroke();\n\n        var points_length = this.paint.points.length; //draw just the last segment\n\n        if (points_length > 1) {\n          ctx.moveTo(this.paint.points[points_length - 2].x, this.paint.points[points_length - 2].y);\n          ctx.lineTo(this.paint.points[points_length - 1].x, this.paint.points[points_length - 1].y);\n        }\n\n        ctx.stroke(); // ctx.closePath();\n      }\n\n      canvas.onmouseup = function () {\n        //Stop drawing\n        _this2.tool_started = !_this2.tool_started; //Draw circle\n\n        ctx.beginPath();\n        ctx.arc(event.offsetX, event.offsetY, _this2.tool_size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n      };\n    },\n    storeActivationMap: function storeActivationMap() {\n      // store activation map of current image\n      var map_ctx = this.$refs.draw.getContext(\"2d\");\n      var map_data = map_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var current_map = this.activation_maps[this.current_image.image_id]; //Convert RGBA array into nested binary arrays\n\n      for (var pixel_index = 0; pixel_index < map_data.data.length; pixel_index += 4) {\n        var row_index = Math.floor(pixel_index / 4 / this.canvas_width);\n        var col_index = pixel_index / 4 % this.canvas_width;\n\n        if (map_data.data[pixel_index + 3] !== 0) {\n          current_map[row_index][col_index] = 1;\n        } else {\n          current_map[row_index][col_index] = 0;\n        }\n      }\n\n      this.activation_maps[this.current_image.image_id] = current_map;\n    },\n    undoChanges: function undoChanges() {},\n    toggleSubmissionDialog: function toggleSubmissionDialog() {\n      this.dialog = !this.dialog;\n    },\n    saveData: function saveData(payload) {\n      var _this3 = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.post(path, payload).then(function () {\n        _this3.loading = false;\n\n        _this3.getActivationMap().then(function (returnVal) {\n          _this3.loadActivationMap();\n        }).catch(function (err) {\n          return console.log(\"Axios err: \", err);\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        _this3.getActivationMap();\n      });\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function onSubmit(from_scratch) {\n      this.storeActivationMap();\n      this.loading_message = \"Initializing Training...\"; //Reset loading message\n\n      var payload = {\n        from_scratch: from_scratch,\n        activation_maps: this.activation_maps\n      };\n      this.saveData(payload);\n      this.dialog = false;\n      this.loading = true;\n    },\n    updateTrainingProgress: function updateTrainingProgress() {\n      var _this4 = this;\n\n      var path = \"http://localhost:5000/training_progress\";\n      axios.get(path).then(function (res) {\n        _this4.current_epoch = res.data.current_epoch;\n        _this4.total_epochs = res.data.total_epochs;\n        _this4.time_remaining = res.data.time_remaining;\n        console.log(_this4.current_epoch);\n        _this4.loading_message = \"Current Epoch:\" + String(_this4.current_epoch) + \"/\" + String(_this4.total_epochs) + \" \" + \"Estimated Time Remaining: \" + _this4.time_remaining;\n        _this4.check_number = _this4.check_number + 1;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  },\n  created: function created() {\n    var _this5 = this;\n\n    this.getActivationMap().then(function (returnVal) {\n      _this5.loadActivationMap();\n    }).catch(function (err) {\n      return console.log(\"Axios err: \", err);\n    });\n  },\n  mounted: function mounted() {}\n};",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app id=\"main\">\n    <v-container align-center justify-center>\n      <!-- Toolbar -->\n      <v-row>\n        <v-toolbar dense prominent class=\"my-8\">\n          <v-app-bar-nav-icon></v-app-bar-nav-icon>\n\n          <v-toolbar-title>An Active Learning Approach to Acute Stroke Detection</v-toolbar-title>\n\n          <v-spacer></v-spacer>\n\n          <v-toolbar-items>\n            <v-btn text v-on:click=\"toggleSubmissionDialog\">\n              Save and Retrain Model\n              <v-icon>mdi-upload</v-icon>\n            </v-btn>\n            <v-btn text>\n              Settings\n              <v-icon>mdi-settings</v-icon>\n            </v-btn>\n          </v-toolbar-items>\n        </v-toolbar>\n      </v-row>\n\n      <!-- User interface -->\n      <v-row align=\"center\" justify=\"center\">\n        <v-col cols=\"8\">\n          <v-container justify-center>\n            <v-card class=\"pa-auto\">\n              <v-container>\n                <v-row align=\"center\" justify=\"center\">\n                  <!-- Buttons -->\n                  <v-col cols=\"2\">\n                    <!-- Show map -->\n                    <!-- <v-col>\n                      <v-switch class=\"mx-4\" inset color=\"indigo\" v-model=\"show_map\"></v-switch>\n                    </v-col>-->\n\n                    <!-- Undo -->\n                    <v-col>\n                      <v-btn class=\"ma-4\" fab dark color=\"purple\">\n                        <v-icon dark>mdi-undo</v-icon>\n                      </v-btn>\n                    </v-col>\n\n                    <!-- Paintbrush -->\n                    <v-col>\n                      <v-menu left offset-y>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn class=\"ma-4\" fab dark color=\"red\" v-on=\"on\">\n                            <v-icon dark>mdi-pencil</v-icon>\n                          </v-btn>\n                        </template>\n\n                        <v-col>\n                          <v-btn-toggle>\n                            <v-btn\n                              v-for=\"parameter in button_parameters\"\n                              :key=\"parameter[0]\"\n                              fab\n                              color=\"orange\"\n                              v-on:click=\"setTool('activate',parameter[0])\"\n                            >\n                              <v-icon :size=\"parameter[1]\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-btn-toggle>\n                        </v-col>\n                      </v-menu>\n                    </v-col>\n\n                    <!-- Eraser -->\n                    <v-col>\n                      <v-menu left offset-y>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn class=\"ma-4\" fab dark color=\"cyan\" v-on=\"on\">\n                            <v-icon dark>mdi-eraser</v-icon>\n                          </v-btn>\n                        </template>\n\n                        <v-col>\n                          <v-btn-toggle>\n                            <v-btn\n                              v-for=\"parameter in button_parameters\"\n                              :key=\"parameter[0]\"\n                              fab\n                              color=\"blue\"\n                              v-on:click=\"setTool('deactivate',parameter[0])\"\n                            >\n                              <v-icon :size=\"parameter[1]\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-btn-toggle>\n                        </v-col>\n\n                        <v-col justify=\"center\">\n                          <v-btn text v-on:click=\"clearActivationMap()\">\n                            Clear All\n                            <v-icon>mdi-close</v-icon>\n                          </v-btn>\n                        </v-col>\n                      </v-menu>\n                    </v-col>\n                  </v-col>\n\n                  <!-- Canvases -->\n                  <v-col cols=\"10\">\n                    <v-row align=\"center\" justify=\"center\">\n                      <h2>Image ID: {{ current_image.image_id }}</h2>\n\n                      <v-divider class=\"mx-4\" vertical></v-divider>\n\n                      <h2>Disease: {{ current_image.disease }}</h2>\n                    </v-row>\n\n                    <ContentLoader class=\"can\" v-if=\"skeleton_loader\" :width=\"600\" :height=\"500\"></ContentLoader>\n\n                    <!--canvas for brain image-->\n                    <div v-else>\n                      <div class=\"canvas\">\n                        <img\n                          class=\"my-0\"\n                          contain\n                          :src=\"require(`../assets/${current_image.path}`)\"\n                          :width=\"canvas_width\"\n                          :height=\"canvas_height\"\n                          aspect-ratio=\"1.2\"\n                        ></img>\n                      </div>\n                      <!-- canvas for cursor -->\n                      <div class=\"canvas\">\n                        <canvas\n                          ref=\"cursor\"\n                          v-bind:width=\"canvas_width\"\n                          v-bind:height=\"canvas_height\"\n                        ></canvas>\n                      </div>\n                      <!--canvas for activation map-->\n                      <div id=\"draw\">\n                        <canvas\n                          ref=\"draw\"\n                          v-bind:width=\"canvas_width\"\n                          v-bind:height=\"canvas_height\"\n                          v-on:mousemove=\"correctActivation\"\n                        ></canvas>\n                      </div>\n                    </div>\n                  </v-col>\n                </v-row>\n              </v-container>\n            </v-card>\n          </v-container>\n          <!-- </v-row> -->\n        </v-col>\n\n        <!-- Thumbnail list -->\n        <v-col cols=\"2\">\n          <v-row justify=\"center\">\n            <v-card>\n              <v-list class=\"overflow-y-auto\" max-height=\"600\">\n                <v-list-item-group>\n                  <v-list-item class=\"ma-4\" v-for=\"image in images\" :key=\"image.id\">\n                    <v-card class=\"pa-2\" width=\"100\" height=\"105\" raised>\n                      <v-img\n                        class=\"my-0\"\n                        contain\n                        :src=\"require(`../assets/${image.path}`)\"\n                        weight=\"75\"\n                        height=\"75\"\n                        v-on:click=\"loadImage(image)\"\n                      ></v-img>\n                      <v-card-subtitle class=\"pa-0\">{{image.image_id}}</v-card-subtitle>\n                    </v-card>\n                  </v-list-item>\n                </v-list-item-group>\n              </v-list>\n            </v-card>\n          </v-row>\n        </v-col>\n      </v-row>\n\n      <!-- Submission dialog -->\n      <v-dialog v-model=\"dialog\" persistent max-width=\"1000\">\n        <v-card>\n          <v-card-title class=\"headline\">Submit activaion maps and retrain model?</v-card-title>\n          <v-card-text>Latest model: {{model_name}}</v-card-text>\n          <v-card-actions>\n            <v-btn color=\"red darken-1\" text v-on:click=\"toggleSubmissionDialog\">Cancel</v-btn>\n\n            <v-spacer></v-spacer>\n\n            <v-btn color=\"green darken-1\" text v-on:click=\"onSubmit(true)\">Train model from scratch</v-btn>\n            <v-btn color=\"green darken-1\" text v-on:click=\"onSubmit(false)\">Retrain model</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Loading dialog -->\n      <v-dialog v-model=\"loading\" persistent width=\"800\">\n        <v-card color=\"primary\" dark>\n          <v-card-title>\n            {{ loading_message }}\n            <v-progress-linear indeterminate color=\"white\"></v-progress-linear>\n          </v-card-title>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>>\n\n<script>\nimport axios from \"axios\";\nimport { ContentLoader } from \"vue-content-loader\";\n\nexport default {\n  components: {\n    ContentLoader\n  },\n  data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      images: [\n        // {\n        //   image_id: string,\n        //   disease: string,\n        //   path: string\n        // },\n      ],\n      activation_maps: [\n        // {string (id): array(activation map)}\n      ],\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      show_map: false,\n      button_parameters: [\n        [20, 25],\n        [10, 12.5],\n        [5, 7.5]\n      ],\n      canvas_width: 600,\n      canvas_height: 500,\n      graphics: {\n        paintbrush: \"rgb(254, 0, 0)\",\n        map_opacity: 0.8\n      },\n      paint: {\n        points: [],\n        tool: \"\"\n      },\n      skeleton_loader: true,\n      skeleton_thumbnail: [1, 2, 3, 4, 5],\n      dialog: false,\n      model_name: \"\",\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      total_epochs: null,\n      time_remaining: \"\",\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function() {\n      if (this.loading) {\n        // check training progress every 10 seconds\n        setTimeout(this.updateTrainingProgress, 10000);\n      } else {\n        return null;\n      }\n    },\n    show_map: function() {}\n  },\n  methods: {\n    setTool: function(tool, tool_size) {\n      this.tool = tool;\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      //return promise\n      return axios\n        .get(\"http://localhost:5000/active_learning\")\n        .then(res => {\n          this.images = res.data.images;\n          this.model_name = res.data.latest_model;\n          this.activation_maps = res.data.activation_maps;\n\n          this.current_image = this.images[0];\n          this.skeleton_loader = false;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function(image) {\n      this.storeActivationMap();\n      // update current image to new image\n      this.current_image = image;\n      this.loadActivationMap();\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n\n      //Clear current activation map\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n\n      ctx.globalCompositeOperation = \"source-over\";\n\n      let current_activation_map = this.activation_maps[\n        this.current_image.image_id\n      ];\n\n      for (let row_index = 0; row_index < this.canvas_height; row_index++) {\n        for (\n          let column_index = 0;\n          column_index < this.canvas_width;\n          column_index++\n        ) {\n          if (current_activation_map[row_index][column_index] === 1) {\n            ctx.fillRect(column_index, row_index, 1, 1);\n          }\n        }\n      }\n    },\n    clearActivationMap: function() {\n      //Clear current activation map\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n\n      //Set graphics parameters\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.lineJoin = ctx.lineCap = \"round\";\n      ctx.lineWidth = this.tool_size;\n\n      //Check if using eraser or painbrush\n      if (this.tool === \"deactivate\") {\n        ctx.globalCompositeOperation = \"destination-out\";\n      } else {\n        ctx.globalCompositeOperation = \"source-over\";\n      }\n\n      canvas.onmousedown = () => {\n        //Draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        //Start drawing\n        this.tool_started = true;\n        this.paint.points.push({ x: event.offsetX, y: event.offsetY });\n        // ctx.beginPath();\n        // ctx.moveTo(event.offsetX, event.offsetY);\n      };\n\n      if (this.tool_started) {\n        this.paint.points.push({ x: event.offsetX, y: event.offsetY });\n\n        ctx.beginPath();\n\n        // ctx.lineTo(event.offsetX, event.offsetY);\n        // ctx.stroke();\n\n        let points_length = this.paint.points.length;\n\n        //draw just the last segment\n        if (points_length > 1) {\n          ctx.moveTo(\n            this.paint.points[points_length - 2].x,\n            this.paint.points[points_length - 2].y\n          );\n          ctx.lineTo(\n            this.paint.points[points_length - 1].x,\n            this.paint.points[points_length - 1].y\n          );\n        }\n        ctx.stroke();\n        // ctx.closePath();\n      }\n\n      canvas.onmouseup = () => {\n        //Stop drawing\n        this.tool_started = !this.tool_started;\n        //Draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n      };\n    },\n    storeActivationMap: function() {\n      // store activation map of current image\n\n      let map_ctx = this.$refs.draw.getContext(\"2d\");\n\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let current_map = this.activation_maps[this.current_image.image_id];\n\n      //Convert RGBA array into nested binary arrays\n      for (\n        let pixel_index = 0;\n        pixel_index < map_data.data.length;\n        pixel_index += 4\n      ) {\n        let row_index = Math.floor(pixel_index / 4 / this.canvas_width);\n        let col_index = (pixel_index / 4) % this.canvas_width;\n        if (map_data.data[pixel_index + 3] !== 0) {\n          current_map[row_index][col_index] = 1;\n        } else {\n          current_map[row_index][col_index] = 0;\n        }\n      }\n\n      this.activation_maps[this.current_image.image_id] = current_map;\n    },\n    undoChanges: function() {},\n    toggleSubmissionDialog: function() {\n      this.dialog = !this.dialog;\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          this.loading = false;\n          this.getActivationMap()\n            .then(returnVal => {\n              this.loadActivationMap();\n            })\n            .catch(err => console.log(\"Axios err: \", err));\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function(from_scratch) {\n      this.storeActivationMap();\n      this.loading_message = \"Initializing Training...\"; //Reset loading message\n\n      const payload = {\n        from_scratch: from_scratch,\n        activation_maps: this.activation_maps\n      };\n\n      this.saveData(payload);\n\n      this.dialog = false;\n\n      this.loading = true;\n    },\n    updateTrainingProgress: function() {\n      const path = \"http://localhost:5000/training_progress\";\n      axios\n        .get(path)\n        .then(res => {\n          this.current_epoch = res.data.current_epoch;\n          this.total_epochs = res.data.total_epochs;\n          this.time_remaining = res.data.time_remaining;\n\n          console.log(this.current_epoch);\n          this.loading_message =\n            \"Current Epoch:\" +\n            String(this.current_epoch) +\n            \"/\" +\n            String(this.total_epochs) +\n            \" \" +\n            \"Estimated Time Remaining: \" +\n            this.time_remaining;\n          this.check_number = this.check_number + 1;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  },\n  created() {\n    this.getActivationMap()\n      .then(returnVal => {\n        this.loadActivationMap();\n      })\n      .catch(err => console.log(\"Axios err: \", err));\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  cursor: none;\n  opacity: 0.3;\n}\n</style>"],"sourceRoot":"src/components"}]}