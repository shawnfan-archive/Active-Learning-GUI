{"remainingRequest":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/src/components/ActiveLearning.vue","mtime":1581182459773},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1576457980983},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/babel-loader/lib/index.js","mtime":1576457980775},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/cache-loader/dist/cjs.js","mtime":1576457980983},{"path":"/Users/shawnfan/Dropbox/Active-Learning-GUI/prototype/node_modules/vue-loader/lib/index.js","mtime":1576457989077}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nexport default {\n  data: function data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      images: [// {\n        //   image_id: string,\n        //   disease: string,\n        //   path: string\n        // },\n      ],\n      activation_maps: [// {string (id): array(activation map)}\n      ],\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      button_parameters: [[20, 25], [10, 12.5], [5, 7.5]],\n      canvas_width: 600,\n      canvas_height: 500,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      },\n      skeleton_loader: true,\n      skeleton_thumbnail: [1, 2, 3, 4, 5],\n      dialog: false,\n      model_name: \"\",\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      total_epochs: null,\n      time_remaining: \"\",\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function check_number() {\n      if (this.loading) {\n        // check training progress every 10 seconds\n        setTimeout(this.updateTrainingProgress, 10000);\n      } else {\n        return null;\n      }\n    }\n  },\n  methods: {\n    setTool: function setTool(tool, tool_size) {\n      this.tool = tool;\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function getActivationMap() {\n      var _this = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.get(path).then(function (res) {\n        _this.images = res.data.images;\n        _this.model_name = res.data.latest_model;\n\n        for (var image_id in res.data.activation_maps) {\n          var activation_map = []; // convert binary array to rgba array\n\n          for (var row_index = 0; row_index < _this.canvas_height; row_index++) {\n            for (var col_index = 0; col_index < _this.canvas_width; col_index++) {\n              if (res.data.activation_maps[image_id][row_index][col_index] === 1) {\n                activation_map.push.apply(activation_map, _this.graphics.activation_color);\n              } else {\n                activation_map.push.apply(activation_map, _this.graphics.inactivation_color);\n              }\n            }\n          }\n\n          _this.activation_maps[image_id] = activation_map;\n        }\n\n        _this.skeleton_loader = false;\n        _this.current_image.image_id = \"\"; // load first image in images\n\n        _this.loadImage(_this.images[0]);\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    loadImage: function loadImage(image) {\n      var _this2 = this;\n\n      // store activation map of old image if not first time loading\n      if (this.current_image.image_id !== \"\") {\n        this.storeActivationMap();\n      } // update current image to new image\n\n\n      this.current_image = image; // set image opacity\n\n      var img_ctx = this.$refs.img.getContext(\"2d\");\n      img_ctx.globalAlpha = this.graphics.image_opacity; // load new image\n\n      var img = new Image();\n      img.src = require(\"../assets/\".concat(this.current_image.path, \".jpeg\"));\n\n      img.onload = function () {\n        img_ctx.drawImage(img, 0, 0, _this2.canvas_width, _this2.canvas_height);\n      }; // load new activation map\n\n\n      this.loadActivationMap();\n    },\n    loadCursor: function loadCursor(x, y) {\n      var ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function loadActivationMap() {\n      // load activation map for current_image\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      var map_data = map_ctx.createImageData(this.canvas_width, this.canvas_height);\n      var current_activation_map = this.activation_maps[this.current_image.image_id];\n\n      for (var pixel_index = 0; pixel_index < current_activation_map.length; pixel_index++) {\n        map_data.data[pixel_index] = current_activation_map[pixel_index];\n      }\n\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function correctActivation(event) {\n      var _this3 = this;\n\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY); // highlight incorrect activation\n\n      var canvas = this.$refs.draw;\n      var ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size; // start drawing\n\n      canvas.onmousedown = function () {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(event.offsetX, event.offsetY, _this3.tool_size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n\n        _this3.updateActivationMap();\n\n        _this3.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n\n      canvas.onmouseup = function () {\n        // stop drawing\n        if (_this3.tool_started) {\n          _this3.tool_started = false;\n        } // draw circle\n\n\n        ctx.beginPath();\n        ctx.arc(event.offsetX, event.offsetY, _this3.tool_size / 2, 0, 2 * Math.PI);\n        ctx.fill();\n\n        _this3.updateActivationMap();\n      };\n    },\n    updateActivationMap: function updateActivationMap() {\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      var draw_ctx = this.$refs.draw.getContext(\"2d\");\n      var map_data = map_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var correction_data = draw_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var pixel_color = this.graphics.activation_color;\n\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      for (var i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      } // draw updated activation map\n\n\n      map_ctx.putImageData(map_data, 0, 0); // clear drawings\n\n      var clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    storeActivationMap: function storeActivationMap() {\n      // store activation map of current image\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      var map_data = map_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      this.activation_maps[this.current_image.image_id] = map_data.data;\n    },\n    openDialog: function openDialog() {\n      this.dialog = true;\n    },\n    closeDialog: function closeDialog() {\n      this.dialog = false;\n    },\n    saveData: function saveData(payload) {\n      var _this4 = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.post(path, payload).then(function () {\n        _this4.loading = false;\n\n        _this4.getActivationMap();\n      }).catch(function (error) {\n        console.log(error);\n\n        _this4.getActivationMap();\n      });\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function onSubmit(from_scratch) {\n      this.storeActivationMap();\n      this.loading_message = \"Initializing Training...\"; //Reset loading message\n      // convert rgba array to binary array\n\n      var corrected_activation_maps = {};\n\n      for (var image_id in this.activation_maps) {\n        var map_array = [];\n\n        for (var pixel_index = 0; pixel_index < this.activation_maps[image_id].length; pixel_index += 4) {\n          if (this.activation_maps[image_id][pixel_index] === 255) {\n            map_array.push(1);\n          } else {\n            map_array.push(0);\n          }\n        }\n\n        corrected_activation_maps[image_id] = map_array;\n      }\n\n      var payload = {\n        from_scratch: from_scratch,\n        activation_maps: corrected_activation_maps\n      };\n      this.saveData(payload);\n      this.dialog = false;\n      this.loading = true;\n    },\n    updateTrainingProgress: function updateTrainingProgress() {\n      var _this5 = this;\n\n      var path = \"http://localhost:5000/training_progress\";\n      axios.get(path).then(function (res) {\n        _this5.current_epoch = res.data.current_epoch;\n        _this5.total_epochs = res.data.total_epochs;\n        _this5.time_remaining = res.data.time_remaining;\n        console.log(_this5.current_epoch);\n        _this5.loading_message = \"Current Epoch:\" + String(_this5.current_epoch) + \"/\" + String(_this5.total_epochs) + \" \" + \"Estimated Time Remaining: \" + _this5.time_remaining;\n        _this5.check_number = _this5.check_number + 1;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    }\n  },\n  created: function created() {\n    this.getActivationMap();\n  },\n  mounted: function mounted() {}\n};",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-app id=\"main\">\n    <v-container align-center justify-center>\n      <!-- Toolbar -->\n      <v-row>\n        <v-toolbar dense prominent class=\"my-8\">\n          <v-app-bar-nav-icon></v-app-bar-nav-icon>\n\n          <v-toolbar-title>An Active Learning Approach to Acute Stroke Detection</v-toolbar-title>\n\n          <v-spacer></v-spacer>\n\n          <v-toolbar-items>\n            <v-btn text v-on:click=\"openDialog\">\n              Save and Retrain Model\n              <v-icon>mdi-upload</v-icon>\n            </v-btn>\n            <v-btn text>\n              Settings\n              <v-icon>mdi-settings</v-icon>\n            </v-btn>\n          </v-toolbar-items>\n        </v-toolbar>\n      </v-row>\n\n      <!-- User interface -->\n      <v-row align=\"center\" justify=\"center\">\n        <v-col cols=\"8\">\n          <v-container justify-center>\n            <v-card class=\"pa-auto\">\n              <v-container>\n                <v-row align=\"center\" justify=\"center\">\n                  <!-- Buttons -->\n                  <v-col cols=\"auto\">\n                    <!-- Paintbrush -->\n                    <v-col>\n                      <v-menu top offset-y>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn class=\"mx-2\" fab dark color=\"red\" v-on=\"on\">\n                            <v-icon dark>mdi-pencil</v-icon>\n                          </v-btn>\n                        </template>\n\n                        <v-list rounded nav>\n                          <v-list-item v-for=\"parameter in button_parameters\" :key=\"parameter[0]\">\n                            <v-btn class=\"mx-1\" fab dark color=\"orange\" v-on:click=\"setTool('activate',parameter[0])\">\n                              <v-icon :size=\"parameter[1]\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n\n                        </v-list>\n                      </v-menu>\n                    </v-col>\n\n                    <!-- Eraser -->\n                    <v-col>\n                      <v-menu bottom offset-y>\n                        <template v-slot:activator=\"{ on }\">\n                          <v-btn class=\"mx-2\" fab dark color=\"cyan\" v-on=\"on\">\n                            <v-icon dark>mdi-eraser</v-icon>\n                          </v-btn>\n                        </template>\n\n                        <v-list rounded nav>\n                          <v-list-item v-for=\"parameter in button_parameters\" :key=\"parameter[0]\">\n                            <v-btn class=\"mx-1\" fab dark color=\"blue\" v-on:click=\"setTool('deactivate',parameter[0])\">\n                              <v-icon :size=\"parameter[1]\">mdi-checkbox-blank-circle</v-icon>\n                            </v-btn>\n                          </v-list-item>\n                        </v-list>\n                      </v-menu>\n                    </v-col>\n\n                  </v-col>\n\n                  <!-- Canvases -->\n                  <v-col cols=\"auto\">\n                    <v-row align=\"center\" justify=\"center\">\n                      <h2>Image ID: {{ current_image.image_id }}</h2>\n\n                      <v-divider class=\"mx-4\" vertical></v-divider>\n\n                      <h2>Disease: {{ current_image.disease }}</h2>\n                    </v-row>\n\n                    <v-row>\n                      <div class=\"canvas\">\n                        <v-skeleton-loader\n                          v-if=\"skeleton_loader\"\n                          :height=\"canvas_height\"\n                          :width=\"canvas_width\"\n                          type=\"image\"\n                        ></v-skeleton-loader>\n                      </div>\n\n                      <!--canvas for brain image-->\n                      <div class=\"canvas\">\n                        <canvas ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n                      </div>\n                      <!--canvas for activation map-->\n                      <div class=\"canvas\">\n                        <canvas ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n                      </div>\n                      <div class=\"canvas\">\n                        <canvas\n                          ref=\"cursor\"\n                          v-bind:width=\"canvas_width\"\n                          v-bind:height=\"canvas_height\"\n                        ></canvas>\n                      </div>\n                      <!--canvas for corrections-->\n                      <div id=\"draw\">\n                        <canvas\n                          ref=\"draw\"\n                          v-bind:width=\"canvas_width\"\n                          v-bind:height=\"canvas_height\"\n                          v-on:mousemove=\"correctActivation\"\n                        ></canvas>\n                      </div>\n                    </v-row>\n                  </v-col>\n                </v-row>\n              </v-container>\n            </v-card>\n          </v-container>\n          <!-- </v-row> -->\n        </v-col>\n\n        <!-- Thumbnail list -->\n        <v-col cols=\"2\">\n          <v-row justify=\"center\">\n            <v-card>\n              <v-list class=\"overflow-y-auto\" max-height=\"600\">\n                <v-list-item-group>\n                  <v-list-item class=\"ma-4\" v-for=\"image in images\" :key=\"image.id\">\n                    <v-card class=\"pa-2\" width=\"100\" height=\"105\" raised>\n                      <v-img\n                        class=\"my-0\"\n                        contain\n                        :src=\"require(`../assets/${image.path}.jpeg`)\"\n                        weight=\"75\"\n                        height=\"75\"\n                        v-on:click=\"loadImage(image)\"\n                      ></v-img>\n                      <v-card-subtitle class=\"pa-0\">{{image.image_id}}</v-card-subtitle>\n                    </v-card>\n                  </v-list-item>\n                </v-list-item-group>\n              </v-list>\n            </v-card>\n          </v-row>\n        </v-col>\n      </v-row>\n\n      <!-- Submission dialog -->\n      <v-dialog v-model=\"dialog\" persistent max-width=\"1000\">\n        <v-card>\n          <v-card-title class=\"headline\">Submit activaion maps and retrain model?</v-card-title>\n          <v-card-text>Latest model: {{model_name}}</v-card-text>\n          <v-card-actions>\n            <v-btn color=\"red darken-1\" text v-on:click=\"closeDialog\">Cancel</v-btn>\n\n            <v-spacer></v-spacer>\n\n            <v-btn color=\"green darken-1\" text v-on:click=\"onSubmit(true)\">Train model from scratch</v-btn>\n            <v-btn color=\"green darken-1\" text v-on:click=\"onSubmit(false)\">Retrain model</v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n\n      <!-- Loading dialog -->\n      <v-dialog v-model=\"loading\" persistent width=\"800\">\n        <v-card color=\"primary\" dark>\n          <v-card-title>\n            {{ loading_message }}\n            <v-progress-linear indeterminate color=\"white\"></v-progress-linear>\n          </v-card-title>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-app>\n</template>>\n\n<script>\nimport axios from \"axios\";\n\nexport default {\n  data() {\n    return {\n      current_image: {\n        image_id: \"\",\n        disease: \"\",\n        path: \"\"\n      },\n      images: [\n        // {\n        //   image_id: string,\n        //   disease: string,\n        //   path: string\n        // },\n      ],\n      activation_maps: [\n        // {string (id): array(activation map)}\n      ],\n      tool: \"deactivate\",\n      tool_started: false,\n      tool_size: 10,\n      button_parameters: [[20, 25], [10, 12.5], [5, 7.5]], \n      canvas_width: 600,\n      canvas_height: 500,\n      graphics: {\n        // rgba\n        activation_color: [255, 0, 0, 100],\n        inactivation_color: [0, 0, 0, 0],\n        paintbrush: \"rgba(0, 0, 255, 255)\",\n        image_opacity: 1.0,\n        map_opacity: 0.8\n      },\n      skeleton_loader: true,\n      skeleton_thumbnail: [1, 2, 3, 4, 5],\n      dialog: false,\n      model_name: \"\",\n      loading: false,\n      check_number: 1,\n      current_epoch: null,\n      total_epochs: null,\n      time_remaining: \"\",\n      loading_message: \"Initializing Training...\"\n    };\n  },\n  watch: {\n    check_number: function() {\n      if (this.loading) {\n        // check training progress every 10 seconds\n        setTimeout(this.updateTrainingProgress, 10000);\n      } else {\n        return null;\n      }\n    }\n  },\n  methods: {\n    setTool: function(tool, tool_size) {\n      this.tool = tool;\n      this.tool_size = tool_size;\n    },\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.images = res.data.images;\n          this.model_name = res.data.latest_model;\n\n          for (let image_id in res.data.activation_maps) {\n            let activation_map = [];\n            // convert binary array to rgba array\n            for (\n              let row_index = 0;\n              row_index < this.canvas_height;\n              row_index++\n            ) {\n              for (\n                let col_index = 0;\n                col_index < this.canvas_width;\n                col_index++\n              ) {\n                if (\n                  res.data.activation_maps[image_id][row_index][col_index] === 1\n                ) {\n                  activation_map.push.apply(\n                    activation_map,\n                    this.graphics.activation_color\n                  );\n                } else {\n                  activation_map.push.apply(\n                    activation_map,\n                    this.graphics.inactivation_color\n                  );\n                }\n              }\n            }\n            this.activation_maps[image_id] = activation_map;\n          }\n\n          this.skeleton_loader = false;\n\n          this.current_image.image_id = \"\";\n\n          // load first image in images\n          this.loadImage(this.images[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    loadImage: function(image) {\n      // store activation map of old image if not first time loading\n      if (this.current_image.image_id !== \"\") {\n        this.storeActivationMap();\n      }\n\n      // update current image to new image\n      this.current_image = image;\n\n      // set image opacity\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      img_ctx.globalAlpha = this.graphics.image_opacity;\n\n      // load new image\n      let img = new Image();\n      img.src = require(`../assets/${this.current_image.path}.jpeg`);\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0, this.canvas_width, this.canvas_height);\n      };\n\n      // load new activation map\n      this.loadActivationMap();\n    },\n    loadCursor: function(x, y) {\n      let ctx = this.$refs.cursor.getContext(\"2d\");\n      ctx.clearRect(0, 0, this.canvas_width, this.canvas_height);\n      ctx.fillStyle = \"rgba(255,255,255,255)\";\n      ctx.beginPath();\n      ctx.arc(x, y, this.tool_size / 2, 0, 2 * Math.PI);\n      ctx.fill();\n    },\n    loadActivationMap: function() {\n      // load activation map for current_image\n\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = this.graphics.map_opacity;\n      let map_data = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let current_activation_map = this.activation_maps[\n        this.current_image.image_id\n      ];\n      for (\n        let pixel_index = 0;\n        pixel_index < current_activation_map.length;\n        pixel_index++\n      ) {\n        map_data.data[pixel_index] = current_activation_map[pixel_index];\n      }\n\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    correctActivation: function(event) {\n      // load cursor\n      this.loadCursor(event.offsetX, event.offsetY);\n\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      ctx.strokeStyle = this.graphics.paintbrush;\n      ctx.fillStyle = this.graphics.paintbrush;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      // start drawing\n      canvas.onmousedown = () => {\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n        this.updateActivationMap();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n        // draw circle\n        ctx.beginPath();\n        ctx.arc(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size / 2,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n        this.updateActivationMap();\n      };\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      let pixel_color = this.graphics.activation_color;\n      if (this.tool === \"deactivate\") {\n        pixel_color = this.graphics.inactivation_color;\n      }\n\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = pixel_color[0];\n          map_data.data[i + 1] = pixel_color[1];\n          map_data.data[i + 2] = pixel_color[2];\n          map_data.data[i + 3] = pixel_color[3];\n        }\n      }\n\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n\n      // clear drawings\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n    },\n    storeActivationMap: function() {\n      // store activation map of current image\n\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n\n      this.activation_maps[this.current_image.image_id] = map_data.data;\n    },\n    openDialog: function() {\n      this.dialog = true;\n    },\n    closeDialog: function() {\n      this.dialog = false;\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          this.loading = false;\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n\n      setTimeout(this.updateTrainingProgress, 10000);\n    },\n    onSubmit: function(from_scratch) {\n      this.storeActivationMap();\n      this.loading_message = \"Initializing Training...\"; //Reset loading message\n      \n      // convert rgba array to binary array\n      let corrected_activation_maps = {};\n      for (let image_id in this.activation_maps) {\n        let map_array = [];\n        for (\n          let pixel_index = 0;\n          pixel_index < this.activation_maps[image_id].length;\n          pixel_index += 4\n        ) {\n          if (this.activation_maps[image_id][pixel_index] === 255) {\n            map_array.push(1);\n          } else {\n            map_array.push(0);\n          }\n        }\n        corrected_activation_maps[image_id] = map_array;\n      }\n\n      const payload = {\n        from_scratch: from_scratch,\n        activation_maps: corrected_activation_maps\n      };\n\n      this.saveData(payload);\n\n      this.dialog = false;\n\n      this.loading = true;\n    },\n    updateTrainingProgress: function() {\n      const path = \"http://localhost:5000/training_progress\";\n      axios\n        .get(path)\n        .then(res => {\n          this.current_epoch = res.data.current_epoch;\n          this.total_epochs = res.data.total_epochs;\n          this.time_remaining = res.data.time_remaining;\n\n          console.log(this.current_epoch);\n          this.loading_message =\n            \"Current Epoch:\" +\n            String(this.current_epoch) +\n            \"/\" +\n            String(this.total_epochs) +\n            \" \" +\n            \"Estimated Time Remaining: \" +\n            this.time_remaining;\n          this.check_number = this.check_number + 1;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#container {\n  position: relative;\n}\n.canvas {\n  position: absolute;\n  cursor: none;\n}\n#draw {\n  position: relative;\n  cursor: none;\n  float: left;\n}\n</style>"],"sourceRoot":"src/components"}]}