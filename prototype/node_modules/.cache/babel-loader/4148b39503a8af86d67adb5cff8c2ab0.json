{"remainingRequest":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/babel-loader/lib/index.js!/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue","mtime":1573249565942},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nexport default {\n  data: function data() {\n    return {\n      activationMap: {},\n      tool_started: false,\n      tool: \"paintbrush\",\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 346\n    };\n  },\n  methods: {\n    getActivationMap: function getActivationMap() {\n      var _this = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.get(path).then(function (res) {\n        _this.activationMap = res.data.activation_map;\n\n        _this.drawImageAndActivation();\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    drawImageAndActivation: function drawImageAndActivation() {\n      // input: n/a\n      // output: load brain image and activation map onto canvas\n      var img_ctx = this.$refs.img.getContext(\"2d\"); // set global opacity\n\n      img_ctx.globalAlpha = 0.8;\n      var pixel_ctx = this.$refs.pixel_img.getContext(\"2d\");\n      pixel_ctx.globalAlpha = 0.8; // draw brain scan\n\n      var img = new Image();\n      img.src = require(\"../assets/brainpic1.jpeg\");\n\n      img.onload = function () {\n        img_ctx.drawImage(img, 0, 0);\n        pixel_ctx.drawImage(img, 0, 0);\n      }; // draw activation map\n      // create new ImageData object\n\n\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = 0.8;\n      var activation_map = map_ctx.createImageData(this.canvas_width, this.canvas_height);\n\n      for (var i = 0; i < activation_map.height; i++) {\n        for (var k = 0; k < activation_map.width; k++) {\n          var map_index = 4 * (activation_map.width * i + k);\n\n          if (this.activationMap.activation[i][k] === 1) {\n            // (255, 0, 0) = red\n            activation_map.data[map_index] = 255;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0; // opacity: 0 - 255\n\n            activation_map.data[map_index + 3] = 100;\n          } else {\n            // (0, 0, 0) = black\n            activation_map.data[map_index] = 0;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            activation_map.data[map_index + 3] = 0;\n          }\n        }\n      }\n\n      map_ctx.putImageData(activation_map, 0, 0);\n    },\n    correctActivation: function correctActivation(event) {\n      var _this2 = this;\n\n      // highlight incorrect activation\n      var canvas = this.$refs.draw;\n      var ctx = this.$refs.draw.getContext(\"2d\");\n\n      if (this.tool === \"paintbrush\") {\n        ctx.strokeStyle = \"blue\";\n        ctx.globalCompositeOperation = \"source-over\";\n      } else {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n        ctx.globalCompositeOperation = \"destination-out\";\n      }\n\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n\n      canvas.onmousedown = function () {\n        // start drawing\n        _this2.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n      }\n\n      canvas.onmouseup = function () {\n        // stop drawing\n        if (_this2.tool_started) {\n          _this2.tool_started = false;\n        }\n      };\n    },\n    correctTest: function correctTest(event) {\n      var _this3 = this;\n\n      var canvas = this.$refs.pixel_img;\n      var ctx = this.$refs.pixel_img.getContext(\"2d\");\n      var map = ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n\n      canvas.onmousedown = function () {\n        _this3.tool_started = true;\n      };\n\n      if (this.tool_started) {\n        var pixelIndices = this.computeToolPixels(event.offsetX, event.offsetY, this.tool_size);\n\n        for (var i = 0; i < pixelIndices.length; i++) {\n          var index = (436 * pixelIndices[i][1] + pixelIndices[i][0]) * 4;\n          map.data[index] = 0;\n          map.data[index + 1] = 0;\n          map.data[index + 2] = 0;\n          map.data[index + 3] = 255;\n        } // // single pixel\n        // let index = (436 * event.offsetY + event.offsetX) * 4;\n        // map.data[index] = 0;\n        // map.data[index + 1] = 0;\n        // map.data[index + 2] = 0;\n        // map.data[index + 3] = 255;\n\n\n        ctx.putImageData(map, 0, 0);\n      }\n\n      canvas.onmouseup = function () {\n        if (_this3.tool_started) {\n          _this3.tool_started = false;\n        }\n      };\n    },\n    computeToolPixels: function computeToolPixels(x, y, radius) {\n      // compute x and y coordinates of all pixels covered by circle with center at (x, y) and radius\n      var pixels = [];\n      var i = 0;\n      var j = 0;\n      var i_start = x - radius;\n      var j_start = y - radius;\n      var i_end = x + radius;\n      var j_end = y + radius;\n\n      for (i = i_start; i < i_end; i++) {\n        for (j = j_start; j < j_end; j++) {\n          if (Math.sqrt(Math.pow(i - x, 2) + Math.pow(j - y, 2)) < radius) {\n            pixels.push([i, j]);\n          }\n        }\n      }\n\n      return pixels;\n    },\n    setTool: function setTool(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function setToolSize(tool_size) {\n      this.tool_size = tool_size;\n    },\n    updateActivationMap: function updateActivationMap() {\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      var draw_ctx = this.$refs.draw.getContext(\"2d\");\n      var map_data = map_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var correction_data = draw_ctx.getImageData(0, 0, this.canvas_width, this.canvas_height);\n      var updated_map_data = map_ctx.createImageData(map_data);\n      console.log(correction_data);\n\n      for (var i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = 0;\n          map_data.data[i + 1] = 0;\n          map_data.data[i + 2] = 0;\n          map_data.data[i + 3] = 0;\n        }\n      } // clear drawing\n\n\n      var clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0); // draw updated activation map\n\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    saveData: function saveData(payload) {\n      var _this4 = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.post(path, payload).then(function () {\n        alert(\"Progress saved!\");\n\n        _this4.getActivationMap();\n      }).catch(function (error) {\n        console.log(error);\n\n        _this4.getActivationMap();\n      });\n    },\n    onSubmit: function onSubmit(event) {\n      this.updateActivationMap();\n      var map_ctx = this.$refs.map.getContext(\"2d\");\n      var corrected_map = map_ctx.getImageData(0, 0, this.activationMap.canvas_width, this.activationMap.canvas_height);\n      var test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      var payload = {\n        corrected_activation: corrected_map.data\n      };\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created: function created() {\n    this.getActivationMap();\n  },\n  mounted: function mounted() {}\n};",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"main\">\n    <p>Image ID: {{ activationMap.image_id }}</p>\n    <p>Disease: {{ activationMap.disease }}</p>\n    <div id=\"container\">\n      <h2>Canvas Line {{activationMap.canvas_width}} by {{activationMap.canvas_height}}</h2>\n      <!--canvas for brain image-->\n      <canvas class=\"canvas\" ref=\"img\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      <!--canvas for activation map-->\n      <canvas class=\"canvas\" ref=\"map\" v-bind:width=\"canvas_width\" v-bind:height=\"canvas_height\"></canvas>\n      <!--canvas for corrections-->\n      <canvas\n        class=\"canvas\"\n        ref=\"draw\"\n        v-bind:width=\"canvas_width\"\n        v-bind:height=\"canvas_height\"\n        v-on:mousemove=\"correctActivation\"\n      ></canvas>\n      <!-- <canvas ref=\"result\" width=\"436\" height=\"364\" style=\"border:1px solid #000000;\"></canvas> -->\n    </div>\n    <div id=\"pixels\">\n      <h2>Pixel Manipulation</h2>\n      <canvas\n        class=\"canvas1\"\n        ref=\"pixel_img\"\n        width=\"436\"\n        height=\"364\"\n        style=\"border:1px solid #000000;\"\n        v-on:mousemove=\"correctTest\"\n      ></canvas>\n    </div>\n    <div id=\"buttons\">\n      <button v-on:click=\"setTool('paintbrush')\">Paintbrush</button>\n      <button v-on:click=\"setToolSize(5)\">5</button>\n      <button v-on:click=\"setToolSize(10)\">10</button>\n      <button v-on:click=\"setToolSize(20)\">20</button>\n      <button v-on:click=\"setTool('eraser')\">Eraser</button>\n      <button v-on:click=\"updateActivationMap\">Update Activation Map</button>\n      <button v-on:click=\"onSubmit\">Save</button>\n    </div>\n    <canvas ref=\"test\" width=\"436\" height=\"364\"></canvas>\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      activationMap: {},\n      tool_started: false,\n      tool: \"paintbrush\",\n      tool_size: 10,\n      canvas_width: 436,\n      canvas_height: 346\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.activationMap = res.data.activation_map;\n          this.drawImageAndActivation();\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    drawImageAndActivation: function() {\n      // input: n/a\n      // output: load brain image and activation map onto canvas\n      let img_ctx = this.$refs.img.getContext(\"2d\");\n      // set global opacity\n      img_ctx.globalAlpha = 0.8;\n      let pixel_ctx = this.$refs.pixel_img.getContext(\"2d\");\n      pixel_ctx.globalAlpha = 0.8;\n      // draw brain scan\n      let img = new Image();\n      img.src = require(\"../assets/brainpic1.jpeg\");\n      img.onload = () => {\n        img_ctx.drawImage(img, 0, 0);\n        pixel_ctx.drawImage(img, 0, 0);\n      };\n      // draw activation map\n      // create new ImageData object\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      map_ctx.globalAlpha = 0.8;\n      let activation_map = map_ctx.createImageData(\n        this.canvas_width,\n        this.canvas_height\n      );\n      for (let i = 0; i < activation_map.height; i++) {\n        for (let k = 0; k < activation_map.width; k++) {\n          let map_index = 4 * (activation_map.width * i + k);\n          if (this.activationMap.activation[i][k] === 1) {\n            // (255, 0, 0) = red\n            activation_map.data[map_index] = 255;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            // opacity: 0 - 255\n            activation_map.data[map_index + 3] = 100;\n          } else {\n            // (0, 0, 0) = black\n            activation_map.data[map_index] = 0;\n            activation_map.data[map_index + 1] = 0;\n            activation_map.data[map_index + 2] = 0;\n            activation_map.data[map_index + 3] = 0;\n          }\n        }\n      }\n      map_ctx.putImageData(activation_map, 0, 0);\n    },\n    correctActivation: function(event) {\n      // highlight incorrect activation\n      let canvas = this.$refs.draw;\n      let ctx = this.$refs.draw.getContext(\"2d\");\n      if (this.tool === \"paintbrush\") {\n        ctx.strokeStyle = \"blue\";\n        ctx.globalCompositeOperation = \"source-over\";\n      } else {\n        ctx.strokeStyle = \"rgba(255, 0, 0, 0.5)\";\n        ctx.globalCompositeOperation = \"destination-out\";\n      }\n      ctx.lineJoin = \"round\";\n      ctx.lineWidth = this.tool_size;\n      canvas.onmousedown = () => {\n        // start drawing\n        this.tool_started = true;\n        ctx.beginPath();\n        ctx.moveTo(event.offsetX, event.offsetY);\n      };\n      if (this.tool_started) {\n        ctx.lineTo(event.offsetX, event.offsetY);\n        ctx.stroke();\n      }\n      canvas.onmouseup = () => {\n        // stop drawing\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    correctTest: function(event) {\n      let canvas = this.$refs.pixel_img;\n      let ctx = this.$refs.pixel_img.getContext(\"2d\");\n      let map = ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      canvas.onmousedown = () => {\n        this.tool_started = true;\n      };\n      if (this.tool_started) {\n        let pixelIndices = this.computeToolPixels(\n          event.offsetX,\n          event.offsetY,\n          this.tool_size\n        );\n        for (let i = 0; i < pixelIndices.length; i++) {\n          let index = (436 * pixelIndices[i][1] + pixelIndices[i][0]) * 4;\n          map.data[index] = 0;\n          map.data[index + 1] = 0;\n          map.data[index + 2] = 0;\n          map.data[index + 3] = 255;\n        }\n        // // single pixel\n        // let index = (436 * event.offsetY + event.offsetX) * 4;\n        // map.data[index] = 0;\n        // map.data[index + 1] = 0;\n        // map.data[index + 2] = 0;\n        // map.data[index + 3] = 255;\n        ctx.putImageData(map, 0, 0);\n      }\n      canvas.onmouseup = () => {\n        if (this.tool_started) {\n          this.tool_started = false;\n        }\n      };\n    },\n    computeToolPixels: function(x, y, radius) {\n      // compute x and y coordinates of all pixels covered by circle with center at (x, y) and radius\n      let pixels = [];\n      let i = 0;\n      let j = 0;\n      let i_start = x - radius;\n      let j_start = y - radius;\n      let i_end = x + radius;\n      let j_end = y + radius;\n      for (i = i_start; i < i_end; i++) {\n        for (j = j_start; j < j_end; j++) {\n          if (Math.sqrt((i - x) ** 2 + (j - y) ** 2) < radius) {\n            pixels.push([i, j]);\n          }\n        }\n      }\n      return pixels;\n    },\n    setTool: function(tool) {\n      this.tool = tool;\n    },\n    setToolSize: function(tool_size) {\n      this.tool_size = tool_size;\n    },\n    updateActivationMap: function() {\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let draw_ctx = this.$refs.draw.getContext(\"2d\");\n      let map_data = map_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let correction_data = draw_ctx.getImageData(\n        0,\n        0,\n        this.canvas_width,\n        this.canvas_height\n      );\n      let updated_map_data = map_ctx.createImageData(map_data);\n      console.log(correction_data);\n      for (let i = 0; i < correction_data.data.length; i += 4) {\n        if (correction_data.data[i + 2] === 255) {\n          map_data.data[i] = 0;\n          map_data.data[i + 1] = 0;\n          map_data.data[i + 2] = 0;\n          map_data.data[i + 3] = 0;\n        }\n      }\n      // clear drawing\n      let clear_data = map_ctx.createImageData(map_data);\n      draw_ctx.putImageData(clear_data, 0, 0);\n      // draw updated activation map\n      map_ctx.putImageData(map_data, 0, 0);\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    onSubmit: function(event) {\n      this.updateActivationMap();\n      let map_ctx = this.$refs.map.getContext(\"2d\");\n      let corrected_map = map_ctx.getImageData(\n        0,\n        0,\n        this.activationMap.canvas_width,\n        this.activationMap.canvas_height\n      );\n      let test_ctx = this.$refs.test.getContext(\"2d\");\n      test_ctx.putImageData(corrected_map, 0, 0);\n      const payload = {corrected_activation: corrected_map.data};\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {}\n};\n</script>\n\n<style scoped>\n#main {\n  position: relative;\n}\n#container {\n  position: relative;\n  float: left;\n}\n.canvas {\n  position: absolute;\n  top: 20;\n  left: 10;\n}\n#pixels {\n  position: relative;\n  float: right;\n}\n.canvas1 {\n  position: relative;\n  float: right;\n}\n#buttons {\n  position: relative;\n  clear: both;\n}\n</style>"],"sourceRoot":"src/components"}]}