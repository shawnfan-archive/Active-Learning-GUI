{"remainingRequest":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/babel-loader/lib/index.js!/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/shawnfan/active_learning_prototype/prototype/src/components/ActiveLearning.vue","mtime":1571861716850},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/shawnfan/active_learning_prototype/prototype/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nexport default {\n  data: function data() {\n    return {\n      activationMap: {},\n      drawMode: \"draw\",\n      drawing: false,\n      markerSize: 10,\n      markers: [],\n      configStage: {\n        width: 500,\n        height: 500\n      },\n      configLayer: {},\n      scale: 8,\n      image: null\n    };\n  },\n  methods: {\n    getActivationMap: function getActivationMap() {\n      var _this = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.get(path).then(function (res) {\n        _this.activationMap = res.data.activation_maps;\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    setDrawMode: function setDrawMode(mode) {\n      this.drawMode = mode;\n    },\n    setMarkerSize: function setMarkerSize(size) {\n      this.drawMode = \"draw\";\n      this.markerSize = size;\n    },\n    toggleDrawing: function toggleDrawing(event) {\n      if (this.drawing === false) {\n        this.drawing = true;\n      } else {\n        this.drawing = false;\n      }\n\n      console.log(this.drawing);\n    },\n    correctActivation: function correctActivation(event) {\n      console.log(event.target.className);\n\n      if (this.drawMode === \"draw\" && this.drawing === true) {\n        var pos = this.$refs.stage.getStage().getPointerPosition();\n        var position = {\n          x: pos.x,\n          y: pos.y,\n          markerSize: this.markerSize,\n          markerID: this.markers.length\n        };\n        this.markers.push(position);\n      } else if (this.drawMode === \"erase\" && event.target.className === \"Circle\" && this.drawing === true) {\n        console.log(event.target.attrs.id);\n        this.markers = this.markers.filter(function (marker) {\n          return marker.markerID !== event.target.attrs.id;\n        });\n      }\n    },\n    saveData: function saveData(payload) {\n      var _this2 = this;\n\n      var path = \"http://localhost:5000/active_learning\";\n      axios.post(path, payload).then(function () {\n        alert(\"Progress saved!\");\n\n        _this2.getActivationMap();\n      }).catch(function (error) {\n        console.log(error);\n\n        _this2.getActivationMap();\n      });\n    },\n    retrainModel: function retrainModel(event) {\n      alert(\"Training in progress...\");\n    },\n    onSubmit: function onSubmit(event) {\n      var payload = {\n        corrections: this.markers\n      };\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created: function created() {\n    this.getActivationMap();\n  },\n  mounted: function mounted() {\n    var image = new Image();\n    image.src = require(\"../assets/pic1.jpeg\");\n    this.image = image;\n  }\n};",{"version":3,"sources":["ActiveLearning.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <app-header></app-header>\n    <p>Image ID: {{ activationMap.image_id }}</p>\n    <p>Image group: {{ activationMap.disease }}</p>\n    <p>Click on activation map to correct activations</p>\n    <button v-on:click=\"setDrawMode('draw')\">Draw</button>\n    <button v-on:click=\"setMarkerSize(10)\">10</button>\n    <button v-on:click=\"setMarkerSize(20)\">20</button>\n    <button v-on:click=\"setMarkerSize(30)\">30</button>\n    <button v-on:click=\"setDrawMode('erase')\">Eraser</button>\n    <v-stage ref=\"stage\" :config=\"configStage\" v-on:mousemove=\"correctActivation\">\n      <v-layer ref=\"layer\" :config=\"configLayer\" v-on:mousedown=\"toggleDrawing\">\n        <v-image :config=\"{\n          image: image\n        }\"></v-image>\n        <v-rect \n          v-for=\"area in activationMap.activation\"\n          :key=\"area.id\"\n          :config=\"{x:scale*area.x, y:scale*area.y, width:scale*1, height:scale*1, fill:'white', opacity:0.5}\"\n        ></v-rect>\n        <v-circle\n          v-for=\"marker in markers\"\n          :key=\"marker.markerID\"\n          :config=\"{x: marker.x, y: marker.y, radius: marker.markerSize, fill: 'blue', id:marker.markerID}\"\n        ></v-circle>\n      </v-layer>\n    </v-stage>\n    <button v-on:click=\"onSubmit\">Save</button>\n    <button v-on:click=\"retrainModel\">Retrain Model</button>\n    <app-footer></app-footer>\n  </div>\n</template>>\n\n<script>\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default {\n  data() {\n    return {\n      activationMap: {},\n      drawMode: \"draw\",\n      drawing: false,\n      markerSize: 10,\n      markers: [],\n      configStage: {\n        width: 500,\n        height: 500\n      },\n      configLayer: {},\n      scale: 8,\n      image: null\n    };\n  },\n  methods: {\n    getActivationMap: function() {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .get(path)\n        .then(res => {\n          this.activationMap = res.data.activation_maps;\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    },\n    setDrawMode: function(mode) {\n      this.drawMode = mode;\n    },\n    setMarkerSize: function(size) {\n      this.drawMode = \"draw\";\n      this.markerSize = size;\n    },\n    toggleDrawing: function(event) {\n      if (this.drawing === false) {\n        this.drawing = true;\n      } else {\n        this.drawing = false;\n      }\n      console.log(this.drawing);\n    },\n    correctActivation: function(event) {\n      console.log(event.target.className);\n      if (this.drawMode === \"draw\" && this.drawing === true) {\n        let pos = this.$refs.stage.getStage().getPointerPosition();\n        let position = {\n          x: pos.x,\n          y: pos.y,\n          markerSize: this.markerSize,\n          markerID: this.markers.length\n        };\n        this.markers.push(position);\n      } else if (\n        this.drawMode === \"erase\" &&\n        event.target.className === \"Circle\" &&\n        this.drawing === true\n      ) {\n        console.log(event.target.attrs.id);\n        this.markers = this.markers.filter(\n          marker => marker.markerID !== event.target.attrs.id\n        );\n      }\n    },\n    saveData: function(payload) {\n      const path = \"http://localhost:5000/active_learning\";\n      axios\n        .post(path, payload)\n        .then(() => {\n          alert(\"Progress saved!\");\n          this.getActivationMap();\n        })\n        .catch(error => {\n          console.log(error);\n          this.getActivationMap();\n        });\n    },\n    retrainModel: function(event) {\n      alert(\"Training in progress...\");\n    },\n    onSubmit: function(event) {\n      const payload = { corrections: this.markers };\n      this.saveData(payload);\n    }\n  },\n  components: {\n    \"app-header\": Header,\n    \"app-footer\": Footer\n  },\n  created() {\n    this.getActivationMap();\n  },\n  mounted() {\n    let image = new Image();\n    image.src = require(\"../assets/pic1.jpeg\");\n    this.image = image;\n  },\n};\n</script>\n\n<style scoped>\n</style>"],"sourceRoot":"src/components"}]}